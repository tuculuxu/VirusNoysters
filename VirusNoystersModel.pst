<?xml version="1.0"?><st-source><!-- Name: VirusNoystersPackageName: VirusNoystersParcel: #('VirusNoysters')ParcelName: VirusNoystersDate: 9:32:07 am June 16, 2015 --><time-stamp>From VisualWorksÂ® NonCommercial, 7.6 of March 3, 2008 on June 16, 2015 at 9:32:07 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><name-space><name>VirusNoysters</name><environment>CormasNS.Models</environment><private>false</private><imports>			private Smalltalk.*			private CormasNS.Kernel.*			</imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></name-space><class><name>Water</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.SpatialEntityElement</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nbBatchesKilled </inst-vars><class-inst-vars>slopeT slopeD slopeN middlePointT middlePointD middlePointN highestPointD highestPointT highestPointN </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>VirusNoysters</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.CormasModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>theWaters theOysters theTables theInfoSystems theMarkets theNaturals theDiploids theTriploids nbFarmers theFarmers theMemorys theFarms nbFriendsPerSide theDecisions theInfoExchanges thePubs theObservations theMixs nbEdgesArrival </inst-vars><class-inst-vars>shareEconomicus shareConservative </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>InfoSystem</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>allRaw farmers isObs </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Oyster</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.AgentLocation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>weight isSellable table size killedByVirus </inst-vars><class-inst-vars>type chromosome sizeMax weightSellable maxGrowth </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Hatchery</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Models.VirusNoysters.Oyster</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>prix </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Observation</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>observationMaker perso friendsObs limits persoRaw friendsRaw beliefs sharePerso shareFriends shareIS initialBelief tableCapacity </inst-vars><class-inst-vars>nbClasses </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><comment><class-id>CormasNS.Models.VirusNoysters.Observation</class-id><body>This class gathers observations made by the farmer while collecting oysters. He counts the number of oysters and dead oysters. These are allocated to predefined classes, the bounds of which are (3000, 5000, 7000, 9000, more). A means is then calculated to create a personal function Mortality = M(Density). This operation is performed for each kind of oyster (ie natural, diploid and triploid from hatcheries) resulting in a three different distributions. These will not necessarily correspond to the real values that are created in the virus method. Then they share these densities with friends and to the ISS. They then average these values. In the end, they have two distributions (their own and their friends') for each of the three types of oysters. The ISS distribution is stored in the ISS because it's the same for every one (for efficiency).Instance Variables:	farmerObs	&lt;Farmer&gt;	the farmer linked to this observation	friendsObs	&lt;Object | Struct&gt;	dictionary of friends observations after averaging	friendsRaw	&lt;ByteFieldDescriptor | CCompoundType | (Collection of: (Object | Struct)) | GFGraphicObject | GFQuadTreeElement | JunImagesToMovie | LensWeakCollection | MC_FileBTree | OtWeakKeyDictionary | PostgreSQLQueryResultList | RBProgramNode | SharedRegistry | Stream | Struct&gt;	description of friendsRaw	limits	&lt;(Collection of: (BlessingLevel | CharacterArray | CharacterBlock | LensExpressionSurrogate | Magnitude | MethodFilter | SpDate)) | ComposedBlock | CompositeFigure | CompositePart | GFCompositeGO | GFQuadTreeElement | JunImagesToMovie | LensBasicTransporter | LensSession | LensWeakCollection | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | OtWeakKeyDictionary | ShadowedBundleCompilationResult | TopLevelItem | UIBuilder | VectorialCompositePOV | VisualRow | VisualStack&gt;	vector that gathers these bounds and a #more value for extremes	perso	&lt;Object | Struct&gt;	dictionary of personal observations after averaging	persoRaw	&lt;ByteFieldDescriptor | CCompoundType | (Collection of: (Object | Struct)) | GFGraphicObject | GFQuadTreeElement | JunImagesToMovie | LensWeakCollection | MC_FileBTree | OtWeakKeyDictionary | PostgreSQLQueryResultList | RBProgramNode | SharedRegistry | Stream | Struct&gt;	collection of personal observations before averaging</body></comment><class><name>Diploid</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Models.VirusNoysters.Hatchery</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><comment><class-id>CormasNS.Models.VirusNoysters.Diploid</class-id><body>Diploids are hatchery oysters that can be bought all year long. They grow in 36 months and are thus exposed 3 times to the virus.</body></comment><class><name>Mix</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>setMixes mT mD mN mTD mTN mDN mTDN </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Market</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>priceGrown priceTriplo priceDiplo priceNatural sizeBatch </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Natural</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Models.VirusNoysters.Oyster</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Farm</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>owner tables aBigBagOfReadyOysters aBigBagOfDeadOysters </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><comment><class-id>CormasNS.Models.VirusNoysters.Farm</class-id><body>A farm is linked to a unique farmer and is an aggregate of tables. It acts as if it was the shed because it gathers ready oysters (and dead ones). Info is collected at the table level which provides enough granularity for distribution calculations. I kept some useless calculations and attributes for statistics, just in case, for now.Instance Variables:	aBigBagOfDeadOysters	&lt;Collection | ComposedBlock | CompositeFigure | CompositePart | GFCompositeGO | GFQuadTreeElement | JunImagesToMovie | LensBasicTransporter | LensSession | LensWeakCollection | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | OtWeakKeyDictionary | ShadowedBundleCompilationResult | Struct | TopLevelItem | UIBuilder | VectorialCompositePOV | VisualRow | VisualStack&gt;	collection of oysters to be thrown away	aBigBagOfReadyOysters	&lt;Collection | ComposedBlock | CompositeFigure | CompositePart | GFCompositeGO | GFQuadTreeElement | JunImagesToMovie | LensBasicTransporter | LensSession | LensWeakCollection | MenuBuilder | MessageCatalogManager | MethodFilterAnd | MethodFilterOr | OtWeakKeyDictionary | ShadowedBundleCompilationResult | Struct | TopLevelItem | UIBuilder | VectorialCompositePOV | VisualRow | VisualStack&gt;	collection of oysters to be sold	diploDeadFarm	&lt;SmallInteger&gt;	description of diploDeadFarm	natDeadFarm	&lt;SmallInteger&gt;	description of natDeadFarm	nbDiploFarm	&lt;SmallInteger&gt;	description of nbDiploFarm	nbNatFarm	&lt;SmallInteger&gt;	description of nbNatFarm	nbOystersFarm	&lt;SmallInteger&gt;	description of nbOystersFarm	nbTriploFarm	&lt;SmallInteger&gt;	description of nbTriploFarm	owner	&lt;LensAbsentee | MessageForwarder | Object | ProtoObject | Proxy&gt;	description of owner	tables	&lt;(Collection of: Table) | GFCompositeGO | GFQuadTreeElement | JunImagesToMovie | LensWeakCollection | OtWeakKeyDictionary | Struct&gt;	description of tables	triploDeadFarm	&lt;SmallInteger&gt;	description of triploDeadFarm</body></comment><class><name>Farmer</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.AgentCommLocation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zeMarket wallet myFarm myDecision myObservation zeIS type beliefs zeMix </inst-vars><class-inst-vars>nbTablesMax </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><comment><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id><body>Main agent of the model. It doesn't perform a lot of methods. It is designed modularly. It is associated with an Observation, a Decision, a Farm and knows the Market and the InformationSystem. See these classes for details. At each step, the farmers calls progressively its different modules to perform certain actions.Instance Variables:	beliefs	&lt;LensAbsentee | MessageForwarder | Object | ProtoObject | Proxy&gt;	description of beliefs	economicus	&lt;SmallInteger&gt;	description of economicus	myDecision	&lt;Decision&gt;	description of myDecision	myFarm	&lt;Farm&gt;	description of myFarm	myObservation	&lt;&gt;	description of myObservation	type	&lt;LensAbsentee | MessageForwarder | Object | ProtoObject | Proxy&gt;	description of type	wallet	&lt;SmallInteger&gt;	description of wallet	zeIS	&lt;&gt;	description of zeIS	zeMarket	&lt;LensAbsentee | Object | ProtoObject&gt;	description of zeMarket</body></comment><class><name>Table</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.ObjectLocation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>zeOysters owner isFull nbOysters nbDiplo nbTriplo readyOysters farm ratioDiploDead ratioTriploDead profilTable nbNat ratioNatDead nbBatches natDead diploDead triploDead </inst-vars><class-inst-vars>carryingCapacity </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Triploid</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Models.VirusNoysters.Hatchery</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><class><name>Decision</name><environment>CormasNS.Models.VirusNoysters</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>decisionMaker shareTriplo shareDiplo idealQtyTriplo idealQtyDiplo idealQtyNat chosenMix shareNat min max changeMix sizeMaxOysterBatch expectedOutcome </inst-vars><class-inst-vars>qtyChange satisfied </class-inst-vars><imports></imports><category>VirusNoystersCategory</category><attributes><package>VirusNoysters</package></attributes></class><comment><class-id>CormasNS.Models.VirusNoysters.Decision</class-id><body>Each farmer is equiped with a Decision object. This object uses personal, friends' and IS observations to make a decision about the quantities of oysters of each type to equip ('If I want to use these oysters, how much should I put?') and then chose a mix (or not) that takes this information info account.Instance Variables:	changeMix	&lt;Boolean&gt;	equals true if the farmer has decided to change his mix of oysters	chosenMix	&lt;Object | Struct&gt;	the mix that has been chosen. It's a dictionary, for instance: (#T 0.5 #D 0.5 #N 0). This one is 50% triploids and 50% diploids.	decisionMaker	&lt;Farmer&gt;	the farmer	idealQtyDiplo	&lt;SmallInteger&gt;	the quantity if diploids that the farmer puts in each batch	idealQtyNat	&lt;SmallInteger&gt;	the quantity if naturals that the farmer puts in each batch	idealQtyTriplo	&lt;SmallInteger&gt;	the quantity if triploids that the farmer puts in each batch	max	&lt;SmallInteger&gt;	an upper mortality bound. The maximum moratlity level that the farmer can accept before diminishing his ideal quantity	min	&lt;SmallInteger&gt;	a lower mortality bound. A level below which the farmer thinks it's reasonable to increase the quantity of oysters per batch	shareDiplo	&lt;SmallInteger&gt;	same as chosenMix at: #D. 	shareNat	&lt;SmallInteger&gt;	same as chosenMix at: #N	shareTriplo	&lt;SmallInteger&gt;	same as chosenMix at: #T	sizeMaxOysterBatch	&lt;LensAbsentee | MessageForwarder | Object | ProtoObject | Proxy&gt; this is a phyisical limit above which it is impossible to fit oysters in a batch</body></comment><methods><class-id>CormasNS.Models.VirusNoysters.Water</class-id> <category>control</category><body package="VirusNoysters" selector="stepVirus:">stepVirus: t		t \\ 4 = 2		ifTrue:			[self nbBatchesKilled: 0.			self virus: t]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Water</class-id> <category>accessing</category><body package="VirusNoysters" selector="nbBatchesKilled">nbBatchesKilled	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^nbBatchesKilled ifNil:[nbBatchesKilled := 0]</body><body package="VirusNoysters" selector="nbBatchesKilled:">nbBatchesKilled: anObject	"Setter accessor of attribute nbBatchesKilled. 	!! This method was automatically generated by Cormas !!  "	nbBatchesKilled := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Water</class-id> <category>virus</category><body package="VirusNoysters" selector="killKillKillOyster:slope:middlePoint:highestPoint:t:">killKillKillOyster: o slope: slope middlePoint: middlePoint highestPoint: highestPoint t: t	"renvoie un booleen qui annonce la mort. Cette valeur est renvoyee en fonction de la probabilite de mortalite, qui augmente avec la quantite.	A revoir pour faire un probleme global, avec qqn qui s'y connait en maths. La mortalite n'est fonction que de la qunatite locale et non globale."		| proba tirage |	proba := self		sigmoidQty: o size		max: o class sizeMaxOysterBatch		slope: slope		midllePoint: middlePoint		highestPoint: highestPoint.	tirage := 100 * Cormas random.	tirage &lt; proba ifTrue:[self nbBatchesKilled: self nbBatchesKilled + 1].	^tirage &lt; proba</body><body package="VirusNoysters" selector="sigmoidQty:max:slope:midllePoint:highestPoint:">sigmoidQty: q max: m slope: slope midllePoint: middlePoint highestPoint: highestPoint	"We use the following formula:	f(q) = K / (1+ exp(-slope(q/m - middlePoint)) = K / (1+exp(slope(middlePoint - q/m)) ou K = 100, le maximum de mortalite possible, "		| exposant den proba |	highestPoint = 0		ifTrue: [^0]		ifFalse:			[exposant := slope * (middlePoint - (q / m)).			den := (2.71828 raisedTo: exposant) + 1.			proba := highestPoint / den.			^proba]</body><body package="VirusNoysters" selector="virus:">virus: t	"Parcourt les huitres situees sur cette cellule et applique les  taux de mortalite en fonction de la categorie d'huitres"		| oysters |	oysters := self occupantsAt: Oyster.	"t &gt; 10 ifTrue:[oysters isEmpty ifFalse:[self halt.]]."	oysters		do:			[:o | 			(o isDead or: [o killedByVirus])				ifTrue:					["self halt"					]				ifFalse:					[o class = Diploid						ifTrue:							[o								killedByVirus:									(self										killKillKillOyster: o										slope: self class slopeD										middlePoint: self class middlePointD										highestPoint: self class highestPointD										t: t)].					o class = Triploid						ifTrue:							[o								killedByVirus:									(self										killKillKillOyster: o										slope: self class slopeT										middlePoint: self class middlePointT										highestPoint: self class highestPointT										t: t)].					(o class = Natural and: [o weight &gt;= 3])						ifTrue:							[o								killedByVirus:									(self										killKillKillOyster: o										slope: self class slopeN										middlePoint: self class middlePointN										highestPoint: self class highestPointN										t: t)].					t &gt; 10000 ifTrue: [o killedByVirus ifTrue: [self halt]]]	"&lt;-- Tres tres bizarre cette histoire"]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Water</class-id> <category>deprecated</category><body package="VirusNoysters" selector="killKillKillOyster:slope:middlePoint:">killKillKillOyster: o slope: slope middlePoint: middlePoint	"renvoie un booleen qui annonce la mort. Cette valeur est renvoyee en fonction de la probabilite de mortalite, qui augmente avec la quantite.	A revoir pour faire un probleme global, avec qqn qui s'y connait en maths. La mortalite n'est fonction que de la qunatite locale et non globale."		| proba |	proba := self		sigmoidQty: o size		max: o class sizeMaxOysterBatch		slope: slope		midllePoint: middlePoint.	^100 * Cormas random &lt; proba</body><body package="VirusNoysters" selector="killKillKillOyster:slope:middlePoint:highestPoint:">killKillKillOyster: o slope: slope middlePoint: middlePoint highestPoint: highestPoint	"renvoie un booleen qui annonce la mort. Cette valeur est renvoyee en fonction de la probabilite de mortalite, qui augmente avec la quantite.	A revoir pour faire un probleme global, avec qqn qui s'y connait en maths. La mortalite n'est fonction que de la qunatite locale et non globale."		| proba tirage |	proba := self		sigmoidQty: o size		max: o class sizeMaxOysterBatch		slope: slope		midllePoint: middlePoint		highestPoint: highestPoint.	tirage := 100 * Cormas random.	tirage &lt; proba ifTrue: [self nbBatchesKilled: self nbBatchesKilled + 1].	o class = Diploid ifTrue: [self halt].	^tirage &lt; proba</body><body package="VirusNoysters" selector="sigmoidQty:a:r:">sigmoidQty: q a: a r: r	self halt.	^self class highestPointD / ((a * 2.71828 raisedTo: (r * q) negated) + 1)</body><body package="VirusNoysters" selector="sigmoidQty:max:a:r:">sigmoidQty: q max: m a: a r: r	"We use the following formula:	f(q) = K / (1+ a * exp(-r(q-m/2)) = K / (1+a' * exp(r(1/2 - q)) ou K = 100, le maximum de mortalite possible, "	^self class highestPointD / ((a * 2.71828 raisedTo: (r * (1/2 - q) / m)) + 1)</body><body package="VirusNoysters" selector="sigmoidQty:max:slope:midllePoint:">sigmoidQty: q max: m slope: slope midllePoint: middlePoint	"We use the following formula:	f(q) = K / (1+ exp(-slope(q/m - middlePoint)) = K / (1+exp(slope(middlePoint - q/m)) ou K = 100, le maximum de mortalite possible, "	^self class highestPointD / (2.71828 raisedTo: (slope *  (q/ m - middlePoint)) + 1)</body><body package="VirusNoysters" selector="stepVirusTriplo">stepVirusTriplo	"Si une table est presente sur le patch, il parcourt les huitres et identifie le type d'huitres et les tue ou pas."		| oysters rouletteRusse |	oysters := self occupantsAt: Oyster.	oysters isEmpty		ifFalse:			[oysters				do:					[:o | 					o class chromosome = 2						ifTrue:							[rouletteRusse := Cormas random &lt; self class mortalityDiploid.							self halt.							o killedByVirus: rouletteRusse]						ifFalse:							[rouletteRusse := Cormas random &lt; self class mortalityTriploid.							o killedByVirus: rouletteRusse]]]</body><body package="VirusNoysters" selector="virus">virus	"Parcourt les huitres situees sur cette cellule et applique les  taux de mortalite en fonction de la categorie d'huitres"		| oysters |	oysters := self occupantsAt: Oyster.	oysters		do:			[:o | 			(o isDead or: [o killedByVirus]) ifTrue:["self halt"] "&lt;-- Tres tres bizarre cette histoire"			ifFalse:[o class = Diploid				ifTrue:					[o						killedByVirus:							(self								killKillKillOyster: o								slope: self class slopeD								middlePoint: self class middlePointD								highestPoint: self class highestPointD)].			o class = Triploid				ifTrue:					[o						killedByVirus:							(self								killKillKillOyster: o								slope: self class slopeT								middlePoint: self class middlePointT								highestPoint: self class highestPointT)].			(o class = Natural and:[o weight &gt;= 3])				ifTrue:					[o						killedByVirus:							(self								killKillKillOyster: o								slope: self class slopeN								middlePoint: self class middlePointN								highestPoint: self class highestPointN). "self halt."]]].</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Water class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Water class</class-id> <category>- default value</category><body package="VirusNoysters" selector="aD_default">aD_default 	"Return the default value of attribute #aD : 100.		!! This method was automatically generated by Cormas !!"	^100</body><body package="VirusNoysters" selector="aN_default">aN_default 	"Return the default value of attribute #aN : 100.		!! This method was automatically generated by Cormas !!"	^100</body><body package="VirusNoysters" selector="aT_default">aT_default 	"Return the default value of attribute #aT : 100.		!! This method was automatically generated by Cormas !!"	^100</body><body package="VirusNoysters" selector="highestPointD_default">highestPointD_default 	"Return the default value of attribute #highestPointD : 15.		!! This method was automatically generated by Cormas !!"	^15</body><body package="VirusNoysters" selector="highestPointN_default">highestPointN_default 	"Return the default value of attribute #highestPointN : 60.		!! This method was automatically generated by Cormas !!"	^60</body><body package="VirusNoysters" selector="highestPointT_default">highestPointT_default 	"Return the default value of attribute #highestPointT : 80.		!! This method was automatically generated by Cormas !!"	^80</body><body package="VirusNoysters" selector="K_default">K_default 	"Return the default value of attribute #K : 100.		!! This method was automatically generated by Cormas !!"	^100</body><body package="VirusNoysters" selector="middlePointD_default">middlePointD_default 	"Return the default value of attribute #middlePointD : 0.5.		!! This method was automatically generated by Cormas !!"	^0.5</body><body package="VirusNoysters" selector="middlePointN_default">middlePointN_default 	"Return the default value of attribute #middlePointN : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="middlePointT_default">middlePointT_default 	"Return the default value of attribute #middlePointT : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbBatchesKilled_default">nbBatchesKilled_default 	"Return the default value of attribute #nbBatchesKilled : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="rD_default">rD_default 	"Return the default value of attribute #rD : 1.		!! This method was automatically generated by Cormas !!"	^1</body><body package="VirusNoysters" selector="rN_default">rN_default 	"Return the default value of attribute #rN : 1.		!! This method was automatically generated by Cormas !!"	^1</body><body package="VirusNoysters" selector="rT_default">rT_default 	"Return the default value of attribute #rT : 1.		!! This method was automatically generated by Cormas !!"	^1</body><body package="VirusNoysters" selector="slopeD_default">slopeD_default 	"Return the default value of attribute #slopeD : 5.		!! This method was automatically generated by Cormas !!"	^5</body><body package="VirusNoysters" selector="slopeN_default">slopeN_default 	"Return the default value of attribute #slopeN : 5.		!! This method was automatically generated by Cormas !!"	^5</body><body package="VirusNoysters" selector="slopeT_default">slopeT_default 	"Return the default value of attribute #slopeT : 5.		!! This method was automatically generated by Cormas !!"	^5</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Water class</class-id> <category>accessing</category><body package="VirusNoysters" selector="highestPointD">highestPointD	"Getter accessor with default value = 15. 	!! This method was automatically generated by Cormas !! "	^highestPointD ifNil:[highestPointD := 15]</body><body package="VirusNoysters" selector="highestPointD:">highestPointD: anObject	"Setter accessor of attribute K. 	!! This method was automatically generated by Cormas !!  "	highestPointD := anObject</body><body package="VirusNoysters" selector="highestPointN">highestPointN	"Getter accessor with default value = 60. 	!! This method was automatically generated by Cormas !! "	^highestPointN ifNil:[highestPointN := 60]</body><body package="VirusNoysters" selector="highestPointN:">highestPointN: anObject	"Setter accessor of attribute highestPointN. 	!! This method was automatically generated by Cormas !!  "	highestPointN := anObject</body><body package="VirusNoysters" selector="highestPointT">highestPointT	"Getter accessor with default value = 80. 	!! This method was automatically generated by Cormas !! "	^highestPointT ifNil:[highestPointT := 80]</body><body package="VirusNoysters" selector="highestPointT:">highestPointT: anObject	"Setter accessor of attribute highestPointT. 	!! This method was automatically generated by Cormas !!  "	highestPointT := anObject</body><body package="VirusNoysters" selector="middlePointD">middlePointD	"Getter accessor with default value = 0.5.	!! This method was automatically generated by Cormas !!"	^middlePointD ifNil:[middlePointD := 0.5]</body><body package="VirusNoysters" selector="middlePointD:">middlePointD: anObject	"Setter accessor of attribute rD. 	!! This method was automatically generated by Cormas !!  "	middlePointD := anObject</body><body package="VirusNoysters" selector="middlePointN">middlePointN	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^middlePointN ifNil:[middlePointN := 0]</body><body package="VirusNoysters" selector="middlePointN:">middlePointN: anObject	"Setter accessor of attribute rN. 	!! This method was automatically generated by Cormas !!  "	middlePointN := anObject</body><body package="VirusNoysters" selector="middlePointT">middlePointT	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^middlePointT ifNil:[middlePointT := 0]</body><body package="VirusNoysters" selector="middlePointT:">middlePointT: anObject	"Setter accessor of attribute rT. 	!! This method was automatically generated by Cormas !!  "	middlePointT := anObject</body><body package="VirusNoysters" selector="slopeD">slopeD	"Getter accessor with default value = 5.	!! This method was automatically generated by Cormas !!"	^slopeD ifNil:[slopeD := 5]</body><body package="VirusNoysters" selector="slopeD:">slopeD: anObject	"Setter accessor of attribute aD. 	!! This method was automatically generated by Cormas !!  "	slopeD := anObject</body><body package="VirusNoysters" selector="slopeN">slopeN	"Getter accessor with default value = 5.	!! This method was automatically generated by Cormas !!"	^slopeN ifNil:[slopeN := 5]</body><body package="VirusNoysters" selector="slopeN:">slopeN: anObject	"Setter accessor of attribute aN. 	!! This method was automatically generated by Cormas !!  "	slopeN := anObject</body><body package="VirusNoysters" selector="slopeT">slopeT	"Getter accessor with default value = 5.	!! This method was automatically generated by Cormas !!"	^slopeT ifNil:[slopeT := 5]</body><body package="VirusNoysters" selector="slopeT:">slopeT: anObject	"Setter accessor of attribute aT. 	!! This method was automatically generated by Cormas !!  "	slopeT := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>instance-creation</category><body package="VirusNoysters" selector="initAgents">initAgents	"To be completed"		| myDecision myObs rand zeSizeMax zeCarryingCapacity |	self		createN: self nbFarmers		randomlyLocatedAloneEntities: Farmer.	self theFarmers		do:			[:f | 			rand := Cormas random.			rand &lt; self class shareEconomicus				ifTrue: [f type: 'economicus']				ifFalse:					[rand &lt; (self class shareEconomicus + self class shareConservative)						ifTrue: [f type: 'conservative']						ifFalse: [f type: 'conscious']]].	"Give a type to farmers"	self theFarmers		do:			[:f | 			f zeMarket: self theMarkets first.			f zeIS: self theInfoSystems first.			f zeMix: self theMixs first.	"Ze decision maker"			myDecision := self newEntity: Decision.			myDecision decisionMaker: f.			f myDecision: myDecision.			myDecision initDecision.			f initFarmer.	"Ze Observation"			myObs := self newEntity: Observation.			zeSizeMax := f myFarm tables first zeOysters first class				sizeMaxOysterBatch.	"Comme ca on ne cherche qu'une seule fois ces attributs"			zeCarryingCapacity := f myFarm tables first class carryingCapacity.			myObs initObservationMaxOysters: zeSizeMax maxBatchesTable:					zeCarryingCapacity.			myObs observationMaker: f.			myDecision sizeMaxOysterBatch: zeSizeMax.			f myObservation: myObs.			f				wallet:					2 * self theMarkets first class priceTriplo						*							(f myDecision idealQtyTriplo / self theMarkets first class sizeBatch)						* zeCarryingCapacity * f myFarm tables size. "On lui donne de quoi equiper deux fois toutes ses tables supposees vides en triploides"]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>init</category><body package="VirusNoysters" selector="init">init	"To be completed"	| leSI leMix |	self createGridX: 40 Y: 40 neighbourhood: 8 closed: true.	self initCells.	self displayPov: #povClassName of: Table.	self displayPov: #povClassName of: Farmer.	"On initialise le marche et le SI et les mix dispo"	self newEntity: Market.		leSI := InfoSystem new.	leSI initIS.	self theInfoSystems add: leSI.	leMix := Mix new.	leMix initMix.	self theMixs add: leMix.	"On initialise les fermiers (voir l'initialisation fermier qui lui attribue un certain nombre de  tables et qui attribue a ces tables un certain nombre d'huitres."	self initAgents.	self		generateSymetricNetworkDensity: self nbFriendsPerSide / self nbFarmers		forAgents: Farmer. "Il serait triste de laisser les fermiers seuls sur leur ferme..."	self theInfoSystems first farmers: self theFarmers.</body><body package="VirusNoysters" selector="initNeighbors">initNeighbors	"To be completed"	| leMix leSI |	self createGridX: 40 Y: 40 neighbourhood: 8 closed: true.	self initCells.	self displayPov: #povClassName of: Table.	self displayPov: #povClassName of: Farmer.	"On initialise le marche et le SI et les mix dispo"	self newEntity: Market.		leSI := InfoSystem new.	leSI initIS.	self theInfoSystems add: leSI.	leMix := self newEntity: Mix.	leMix initMix."On initialise les fermiers (voir l'initialisation fermier qui lui attribue un certain nombre de  tables et qui attribue a ces tables un certain nombre d'huitres."	self initAgents.	self generateNeighboringNetwork: self nbFriendsPerSide.	leSI farmers: self theFarmers.</body><body package="VirusNoysters" selector="initNoNetwork">initNoNetwork	"To be completed"	| leMix leSI |	self createGridX: 40 Y: 40 neighbourhood: 8 closed: true.	self initCells.	self displayPov: #povClassName of: Table.	self displayPov: #povClassName of: Farmer.	"On initialise le marche et le SI et les mix dispo"	self newEntity: Market.		leSI := InfoSystem new.	leSI initIS.	self theInfoSystems add: leSI.	leMix := self newEntity: Mix.	leMix initMix."On initialise les fermiers (voir l'initialisation fermier qui lui attribue un certain nombre de  tables et qui attribue a ces tables un certain nombre d'huitres."	self initAgents.	leSI farmers: self theFarmers.</body><body package="VirusNoysters" selector="initPreferential">initPreferential	"To be completed"	| leSI leMix |	self createGridX: 40 Y: 40 neighbourhood: 8 closed: true.	self initCells.	self displayPov: #povClassName of: Table.	self displayPov: #povClassName of: Farmer.	"On initialise le marche et le SI et les mix dispo"	self newEntity: Market.		leSI := InfoSystem new.	leSI initIS.	self theInfoSystems add: leSI.	leMix := Mix new.	leMix initMix.	self theMixs add: leMix.	"On initialise les fermiers (voir l'initialisation fermier qui lui attribue un certain nombre de  tables et qui attribue a ces tables un certain nombre d'huitres."	self initAgents.	self generatePreferentialAttachmentNetworkFlatProbabilities.	leSI farmers: self theFarmers.</body><body package="VirusNoysters" selector="initPreferentialStrong">initPreferentialStrong	"To be completed"	| leSI leMix |	self createGridX: 40 Y: 40 neighbourhood: 8 closed: true.	self initCells.	self displayPov: #povClassName of: Table.	self displayPov: #povClassName of: Farmer.	"On initialise le marche et le SI et les mix dispo"	self newEntity: Market.		leSI := InfoSystem new.	leSI initIS.	self theInfoSystems add: leSI.	leMix := Mix new.	leMix initMix.	self theMixs add: leMix.	"On initialise les fermiers (voir l'initialisation fermier qui lui attribue un certain nombre de  tables et qui attribue a ces tables un certain nombre d'huitres."	self initAgents.	self generatePreferentialAttachmentNetworkStrongProbabilities.	leSI  farmers: self theFarmers.</body><body package="VirusNoysters" selector="initPreferentialStrongSeveralFriends">initPreferentialStrongSeveralFriends	"To be completed"	| leSI leMix |	self createGridX: 40 Y: 40 neighbourhood: 8 closed: true.	self initCells.	self displayPov: #povClassName of: Table.	self displayPov: #povClassName of: Farmer.	"On initialise le marche et le SI et les mix dispo"	self newEntity: Market.		leSI := InfoSystem new.	leSI initIS.	self theInfoSystems add: leSI.	leMix := Mix new.	leMix initMix.	self theMixs add: leMix.	"On initialise les fermiers (voir l'initialisation fermier qui lui attribue un certain nombre de  tables et qui attribue a ces tables un certain nombre d'huitres."	self initAgents.	self generatePreferentialAttachmentNetworkStrongProbabilities: self nbEdgesArrival.	leSI farmers: self theFarmers.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>control</category><body package="VirusNoysters" selector="step:">step: t	"ATTENTION !! Ne fonctionne que si aucun ou tous les farmers utilisent le SI !!!"		self askRandom: Water toDo: #stepVirus: with: t.	self askRandom: Oyster toDo: #stepOyster.	"Oysters grow and die, that's their way of life"	self askRandom: Table toDo: #getInfo.	"Tables are very modern: they make all the calculations by themselves: observe growth, count deads ..."	self askRandom: Farm toDo: #stepFarm.	"centralize info and collect ready oysters"	self askRandom: Farmer toDo: #sellOysters.	"OF sell what they can"	self askRandom: Table toDo: #removeReady.	"Technical method to delete oysters from tables"	self askRandom: Oyster toDo: #removeOyster.	"Technical method that turns dead to true for suitable oysters"	t \\ 4 = 2		ifTrue:			[self askRandom: Observation toDo: #updatePerso.	"Aggregates and processes info collected at the farm level"			self askRandom: Observation toDo: #updateFriends.			self theObservations first shareIS &gt; 0 "Ne fonctionne donc que si aucun ou tous les farmers utilisent le SI."				ifTrue: [self askRandom: InfoSystem toDo: #stepIS: with: t].			self askRandom: Observation toDo: #updateBeliefs.			self askRandom: Decision toDo: #stepDecision: with: t].	"Information gathering step: at the end, in Observations, farmers have their own observations, observations from their friends and global information gathered through the IS. They use this info to make a decision over quantities and mix of oysters"	self askRandom: Farmer toDo: #equipTables: with: t</body><body package="VirusNoysters" selector="stepFull:"> stepFull: t	self askRandom: Water toDo: #stepVirus: with: t.	self askRandom: Oyster toDo: #stepOyster.	"Oysters grow and die, that's their way of life"	self askRandom: Table toDo: #getInfo.	"Tables are very modern: they make all the calculations by themselves: observe growth, count deads ..."	self askRandom: Farm toDo: #stepFarm.	"centralize info and collect ready oysters"	self askRandom: Farmer toDo: #sellOysters.	"OF sell what they can"	self askRandom: Table toDo: #removeReady.	"Technical method to delete oysters from tables"	self askRandom: Oyster toDo: #removeOyster. "Technical method that turns dead to true for suitable oysters"	t \\ 4 = 2 "Information gathering step: at the end, in Observations, farmers have their own observations, observations from their friends and global information gathered through the IS. They use this info to make a decision over quantities and mix of oysters"		ifTrue:			[self askRandom: Observation toDo: #updatePerso. "Aggregates and processes info collected at the farm level"			self askRandom: Observation toDo: #updateFriends.			self askRandom: InfoSystem toDo: #stepIS: with: t.			self askRandom: Observation toDo: #updateBeliefs.			self askRandom: Decision toDo: #stepDecision: with: t].		self askRandom: Farmer toDo: #equipTables: with: t.</body><body package="VirusNoysters" selector="stepNoIS:"> stepNoIS: t	self askRandom: Water toDo: #stepVirus: with: t.	self askRandom: Oyster toDo: #stepOyster.	"Oysters grow and die, that's their way of life"	self askRandom: Table toDo: #getInfo.	"Tables are very modern: they make all the calculations by themselves: observe growth, count deads ..."	self askRandom: Farm toDo: #stepFarm.	"centralize info and collect ready oysters"	self askRandom: Farmer toDo: #sellOysters.	"OF sell what they can"	self askRandom: Table toDo: #removeReady.	"Technical method to delete oysters from tables"	self askRandom: Oyster toDo: #removeOyster. "Technical method that turns dead to true for suitable oysters"	t \\ 4 = 2 "Information gathering step: at the end, in Observations, farmers have their own observations, observations from their friends and global information gathered through the IS. They use this info to make a decision over quantities and mix of oysters"		ifTrue:			[self askRandom: Observation toDo: #updatePerso. "Aggregates and processes info collected at the farm level"			self askRandom: Observation toDo: #updateFriends.			self askRandom: Observation toDo: #updateBeliefs.			self askRandom: Decision toDo: #stepDecision: with: t].		self askRandom: Farmer toDo: #equipTables: with: t.</body><body package="VirusNoysters" selector="stepNoNetwork:"> stepNoNetwork: t	self askRandom: Water toDo: #stepVirus: with: t.	self askRandom: Oyster toDo: #stepOyster.	"Oysters grow and die, that's their way of life"	self askRandom: Table toDo: #getInfo.	"Tables are very modern: they make all the calculations by themselves: observe growth, count deads ..."	self askRandom: Farm toDo: #stepFarm.	"centralize info and collect ready oysters"	self askRandom: Farmer toDo: #sellOysters.	"OF sell what they can"	self askRandom: Table toDo: #removeReady.	"Technical method to delete oysters from tables"	self askRandom: Oyster toDo: #removeOyster. "Technical method that turns dead to true for suitable oysters"	t \\ 4 = 2 "Information gathering step: at the end, in Observations, farmers have their own observations, observations from their friends and global information gathered through the IS. They use this info to make a decision over quantities and mix of oysters"		ifTrue:			[self askRandom: Observation toDo: #updatePerso. "Aggregates and processes info collected at the farm level"			self askRandom: InfoSystem toDo: #stepIS: with: t.			self askRandom: Observation toDo: #updateBeliefs.			self askRandom: Decision toDo: #stepDecision: with: t].		self askRandom: Farmer toDo: #equipTables: with: t.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>accessing</category><body package="VirusNoysters" selector="nbEdgesArrival">nbEdgesArrival	"Getter accessor with default value = 2.	!! This method was automatically generated by Cormas !!"	^nbEdgesArrival ifNil:[nbEdgesArrival := 2]</body><body package="VirusNoysters" selector="nbEdgesArrival:">nbEdgesArrival: anObject	"Setter accessor of attribute nbEgdesArrival. 	!! This method was automatically generated by Cormas !!  "	nbEdgesArrival := anObject</body><body package="VirusNoysters" selector="nbFarmers">nbFarmers	"Getter accessor with default value = 30.	!! This method was automatically generated by Cormas !!"	^nbFarmers ifNil:[nbFarmers := 30]</body><body package="VirusNoysters" selector="nbFarmers:">nbFarmers: anObject	"Setter accessor of attribute nbFarmers. 	!! This method was automatically generated by Cormas !!  "	nbFarmers := anObject</body><body package="VirusNoysters" selector="nbFriendsPerSide">nbFriendsPerSide	"Getter accessor with default value = 2.	!! This method was automatically generated by Cormas !!"	^nbFriendsPerSide ifNil:[nbFriendsPerSide := 2]</body><body package="VirusNoysters" selector="nbFriendsPerSide:">nbFriendsPerSide: anObject	"Setter accessor of attribute nbFriends. 	!! This method was automatically generated by Cormas !!  "	nbFriendsPerSide := anObject</body><body package="VirusNoysters" selector="theDecisions">theDecisions	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theDecisions ifNil:[theDecisions := IndexedSet new]</body><body package="VirusNoysters" selector="theDecisions:">theDecisions: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theDecisions := aNewCollection</body><body package="VirusNoysters" selector="theDiploids">theDiploids	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theDiploids ifNil:[theDiploids := IndexedSet new]</body><body package="VirusNoysters" selector="theDiploids:">theDiploids: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theDiploids := aNewCollection</body><body package="VirusNoysters" selector="theFarmers">theFarmers	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theFarmers ifNil:[theFarmers := IndexedSet new]</body><body package="VirusNoysters" selector="theFarmers:">theFarmers: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theFarmers := aNewCollection</body><body package="VirusNoysters" selector="theFarms">theFarms	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theFarms ifNil:[theFarms := IndexedSet new]</body><body package="VirusNoysters" selector="theFarms:">theFarms: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theFarms := aNewCollection</body><body package="VirusNoysters" selector="theHatcherys">theHatcherys	"Returns a collection of all the instances of aClass (and sub classes) collected by cormasModel.	!! This method was automatically generated by Cormas !! "   ^self allTheEntities: Hatchery</body><body package="VirusNoysters" selector="theInfoSystems">theInfoSystems	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theInfoSystems ifNil:[theInfoSystems := IndexedSet new]</body><body package="VirusNoysters" selector="theInfoSystems:">theInfoSystems: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theInfoSystems := aNewCollection</body><body package="VirusNoysters" selector="theMarkets">theMarkets	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theMarkets ifNil:[theMarkets := IndexedSet new]</body><body package="VirusNoysters" selector="theMarkets:">theMarkets: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theMarkets := aNewCollection</body><body package="VirusNoysters" selector="theMemorys">theMemorys	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theMemorys ifNil:[theMemorys := IndexedSet new]</body><body package="VirusNoysters" selector="theMemorys:">theMemorys: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theMemorys := aNewCollection</body><body package="VirusNoysters" selector="theMixs">theMixs	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theMixs ifNil:[theMixs := IndexedSet new]</body><body package="VirusNoysters" selector="theMixs:">theMixs: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theMixs := aNewCollection</body><body package="VirusNoysters" selector="theNaturals">theNaturals	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theNaturals ifNil:[theNaturals := IndexedSet new]</body><body package="VirusNoysters" selector="theNaturals:">theNaturals: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theNaturals := aNewCollection</body><body package="VirusNoysters" selector="theObservations">theObservations	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theObservations ifNil:[theObservations := IndexedSet new]</body><body package="VirusNoysters" selector="theObservations:">theObservations: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theObservations := aNewCollection</body><body package="VirusNoysters" selector="theOysters">theOysters	"Returns a collection of all the instances of aClass (and sub classes) collected by cormasModel.	!! This method was automatically generated by Cormas !! "   ^self allTheEntities: Oyster</body><body package="VirusNoysters" selector="theOysters:">theOysters: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theOysters := aNewCollection</body><body package="VirusNoysters" selector="thePubs">thePubs	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theFriends ifNil:[theFriends := IndexedSet new]</body><body package="VirusNoysters" selector="thePubs:">thePubs: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theFriends := aNewCollection</body><body package="VirusNoysters" selector="theTables">theTables	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theTables ifNil:[theTables := IndexedSet new]</body><body package="VirusNoysters" selector="theTables:">theTables: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theTables := aNewCollection</body><body package="VirusNoysters" selector="theTriploids">theTriploids	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theTriploids ifNil:[theTriploids := IndexedSet new]</body><body package="VirusNoysters" selector="theTriploids:">theTriploids: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theTriploids := aNewCollection</body><body package="VirusNoysters" selector="theWaters">theWaters	"Returns a collection of all the instances of the sub classes collected by cormasModel.	!! This method was automatically generated by Cormas !!"^theWaters ifNil:[theWaters := IndexedSet new]</body><body package="VirusNoysters" selector="theWaters:">theWaters: aNewCollection	"Set a new collection for theXXXs attribute.	!! This method was automatically generated by Cormas !!"	theWaters := aNewCollection</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>probes</category><body package="VirusNoysters" selector="averageIdealQtyDiplo">averageIdealQtyDiplo "return the average value of Decision idealQtyDiplo to be recorded" ^self averageOfAttribute: #idealQtyDiplo of: Decision</body><body package="VirusNoysters" selector="averageIdealQtyNat">averageIdealQtyNat "return the average value of Decision idealQtyNat to be recorded" ^self averageOfAttribute: #idealQtyNat of: Decision</body><body package="VirusNoysters" selector="averageIdealQtyTriplo">averageIdealQtyTriplo "return the average value of Decision idealQtyTriplo to be recorded" ^self averageOfAttribute: #idealQtyTriplo of: Decision</body><body package="VirusNoysters" selector="averageSizeOfDiploids">averageSizeOfDiploids "return the average value of Diploid size to be recorded" ^self averageOfAttribute: #size of: Diploid</body><body package="VirusNoysters" selector="averageSizeOfNaturals">averageSizeOfNaturals "return the average value of Natural size to be recorded" ^self averageOfAttribute: #size of: Natural</body><body package="VirusNoysters" selector="averageSizeOfTriploids">averageSizeOfTriploids "return the average value of Triploid size to be recorded" ^self averageOfAttribute: #size of: Triploid</body><body package="VirusNoysters" selector="averageWalletOfConscious">averageWalletOfConscious	"return the average value of conscious' wallet to be recorded"		| w nb |	w := 0.	nb := 0.	self theFarmers		do:			[:f | 			f type = 'conscious'				ifTrue:					[w := w + f wallet.					nb := nb + 1]].	nb &gt; 0		ifTrue: [^w / nb]		ifFalse: [^0]</body><body package="VirusNoysters" selector="averageWalletOfConservative">averageWalletOfConservative	"return the average value of conservatives' wallet to be recorded"		| w nb |	w := 0.	nb := 0.	self theFarmers		do:			[:f | 			f type = 'conservative'				ifTrue:					[w := w + f wallet.					nb := nb + 1]].	nb &gt; 0		ifTrue: [^w / nb]		ifFalse: [^0]</body><body package="VirusNoysters" selector="averageWalletOfEconomicus">averageWalletOfEconomicus	"return the average value of economicus' wallet to be recorded"		| w nb |	w := 0.	nb := 0.	self theFarmers		do:			[:f | 			f type = 'economicus'				ifTrue:					[w := w + f wallet.					nb := nb + 1]].	nb &gt; 0		ifTrue: [^w / nb]		ifFalse: [^0]</body><body package="VirusNoysters" selector="averageWeightOfOysters">averageWeightOfOysters "return the average value of Oyster weight to be recorded" ^self averageOfAttribute: #weight of: Oyster</body><body package="VirusNoysters" selector="mortalityRateDIplo">mortalityRateDIplo	"return the data (a number) to be recorded"		self sumNbDiploOfTables = 0		ifTrue: [^0]		ifFalse: [^self sumDiploDeadOfTables / self sumNbDiploOfTables]</body><body package="VirusNoysters" selector="mortalityRateNat">mortalityRateNat	"return the data (a number) to be recorded"		self sumNbNatOfTables = 0		ifTrue: [^0]		ifFalse: [^self sumNatDeadOfTables / self sumNbNatOfTables]</body><body package="VirusNoysters" selector="mortalityRateTrIplo">mortalityRateTrIplo	"return the data (a number) to be recorded"		^self sumNbTriploOfTables = 0		ifTrue: [^0]		ifFalse:			[self sumTriploDeadOfTables / self sumNbTriploOfTables]</body><body package="VirusNoysters" selector="nbConscious">nbConscious "return the sum value of Farmer type to be recorded"  | nb |	nb := 0. self theFarmers do: [:f | f type = 'conscious' ifTrue:[nb := nb +1]].^nb</body><body package="VirusNoysters" selector="nbConservative">nbConservative "return the sum value of Farmer type to be recorded"  | nb |	nb := 0. self theFarmers do: [:f | f type = 'conservative' ifTrue:[nb := nb +1]].^nb</body><body package="VirusNoysters" selector="nbEconomicus">nbEconomicus "return the sum value of Farmer type to be recorded"  | nb |	nb := 0. self theFarmers do: [:f | f type = 'economicus' ifTrue:[nb := nb +1]].^nb</body><body package="VirusNoysters" selector="nbMixD">nbMixD		| nbMix |	nbMix := 0.	self theDecisions		do: [:d | d shareDiplo = 1 ifTrue: [nbMix := nbMix + 1]].	^nbMix</body><body package="VirusNoysters" selector="nbMixDN">nbMixDN		| nbMix |	nbMix := 0.	self theDecisions		do:			[:d | 			(d shareDiplo = 0.5 and: [d shareNat = 0.5])				ifTrue: [nbMix := nbMix + 1]].	^nbMix</body><body package="VirusNoysters" selector="nbMixN">nbMixN		| nbMix |	nbMix := 0.	self theDecisions		do: [:d | d shareNat = 1 ifTrue: [nbMix := nbMix + 1]].	^nbMix</body><body package="VirusNoysters" selector="nbMixT">nbMixT		| nbMix |	nbMix := 0.	self theDecisions		do: [:d | d shareTriplo = 1 ifTrue: [nbMix := nbMix + 1]].	^nbMix.</body><body package="VirusNoysters" selector="nbMixTD">nbMixTD		| nbMix |	nbMix := 0.	self theDecisions		do:			[:d | 			(d shareTriplo = 0.5 and: [d shareDiplo = 0.5])				ifTrue: [nbMix := nbMix + 1]].	^nbMix</body><body package="VirusNoysters" selector="nbMixTDN">nbMixTDN		| nbMix |	nbMix := 0.	self theDecisions		do: [:d | d shareTriplo = 0.33 ifTrue: [nbMix := nbMix + 1]].	^nbMix</body><body package="VirusNoysters" selector="nbMixTN">nbMixTN		| nbMix |	nbMix := 0.	self theDecisions		do:			[:d | 			(d shareTriplo = 0.5 and: [d shareNat = 0.5])				ifTrue: [nbMix := nbMix + 1]].	^nbMix</body><body package="VirusNoysters" selector="numberMaxOfBatches">numberMaxOfBatches	"return the populmation size of Table"		^self theTables size * self theTables first class carryingCapacity</body><body package="VirusNoysters" selector="numberOfDiploids">numberOfDiploids "return the populmation size of Diploid" ^self theDiploids size</body><body package="VirusNoysters" selector="numberOfNaturals">numberOfNaturals "return the populmation size of Natural" ^self theNaturals size</body><body package="VirusNoysters" selector="numberOfOysters">numberOfOysters "return the populmation size of Oyster" ^self theOysters size</body><body package="VirusNoysters" selector="numberOfTables">numberOfTables "return the populmation size of Table" ^self theTables size</body><body package="VirusNoysters" selector="numberOfTriploids">numberOfTriploids "return the populmation size of Triploid" ^self theTriploids size</body><body package="VirusNoysters" selector="sumChangeMix">sumChangeMix	"return the sum value of Decision changeMix to be recorded"		| changeMixes |	changeMixes := 0.	self theDecisions		do: [:d | d changeMix ifTrue: [changeMixes := changeMixes + 1]].	^changeMixes</body><body package="VirusNoysters" selector="sumChangeMixConservative">sumChangeMixConservative	"return the sum value of Decision changeMix to be recorded"		| changeMixes |	changeMixes := 0.	self theDecisions		do:			[:d | 			d decisionMaker type = 'conservative'				ifTrue: [d changeMix ifTrue: [changeMixes := changeMixes + 1]]].	^changeMixes</body><body package="VirusNoysters" selector="sumChangeMixEconomicus">sumChangeMixEconomicus	"return the sum value of Decision changeMix to be recorded"		| changeMixes |	changeMixes := 0.	self theDecisions		do:			[:d | 			d decisionMaker type = 'economicus'				ifTrue: [d changeMix ifTrue: [changeMixes := changeMixes + 1]]].	^changeMixes</body><body package="VirusNoysters" selector="sumDiploDeadOfTables">sumDiploDeadOfTables "return the sum value of Table diploDeadTable to be recorded" ^self sumOfAttribute: #diploDead of: Table</body><body package="VirusNoysters" selector="sumNatDeadOfTables">sumNatDeadOfTables "return the sum value of Table natDeadTable to be recorded" ^self sumOfAttribute: #natDead of: Table</body><body package="VirusNoysters" selector="sumNbBatchesKilledOfWaters">sumNbBatchesKilledOfWaters "return the sum value of Water nbBatchesKilled to be recorded" ^self sumOfAttribute: #nbBatchesKilled of: Water</body><body package="VirusNoysters" selector="sumNbBatchesOfTables">sumNbBatchesOfTables "return the sum value of Table nbBatches to be recorded" ^self sumOfAttribute: #nbBatches of: Table</body><body package="VirusNoysters" selector="sumNbDiploOfTables">sumNbDiploOfTables "return the sum value of Table nbDiploTable to be recorded" ^self sumOfAttribute: #nbDiplo of: Table</body><body package="VirusNoysters" selector="sumNbNatOfTables">sumNbNatOfTables "return the sum value of Table nbNatTable to be recorded" ^self sumOfAttribute: #nbNat of: Table</body><body package="VirusNoysters" selector="sumNbTriploOfTables">sumNbTriploOfTables "return the sum value of Table nbTriploTable to be recorded" ^self sumOfAttribute: #nbTriplo of: Table</body><body package="VirusNoysters" selector="sumTriploDeadOfTables">sumTriploDeadOfTables "return the sum value of Table triploDeadTable to be recorded" ^self sumOfAttribute: #triploDead of: Table</body><body package="VirusNoysters" selector="sumWalletOfFarmers">sumWalletOfFarmers "return the sum value of Farmer wallet to be recorded" ^self sumOfAttribute: #wallet of: Farmer</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>networks</category><body package="VirusNoysters" selector="addFriend:aCollectionOfFriends:">addFriend: aFriendlessAgent aCollectionOfFriends: newFriends	newFriends do: [:nf | self addFriends: nf newFriend: aFriendlessAgent]</body><body package="VirusNoysters" selector="addFriends:newFriend:">addFriends: anAgent newFriend: anotherAgent	"Creates a symmetrical edge between anAgent and anotherAgent"		anAgent acquaintances add: anotherAgent.	anotherAgent acquaintances add: anAgent</body><body package="VirusNoysters" selector="generateCompleteNetworkForCollection:">generateCompleteNetworkForCollection: aCollectionOfAgents		aCollectionOfAgents size &gt; 1		ifTrue:			[1				to: aCollectionOfAgents size - 1				do:					[:i | 					i + 1						to: aCollectionOfAgents size						do:							[:k | 							self								addFriends: (aCollectionOfAgents at: i)								newFriend: (aCollectionOfAgents at: k)]]]</body><body package="VirusNoysters" selector="generateNeighboringNetwork:">generateNeighboringNetwork: i	"Network were agents are friends with their neighbors, up to the ith on each side. They thus have a network of 2i friends. We use the id."		| myNewFriend newFriendsId |	2 * i &lt; self theAgents size ifFalse: [self halt].	self theAgents		do:			[:j | 			1				to: i				do:					[:k | 					newFriendsId := j id + k &lt;= self theAgents size						ifTrue: [j id + k]						ifFalse: [(j id + k) \\ self theAgents size].					myNewFriend := self theAgents at: newFriendsId.					self addFriends: j newFriend: myNewFriend]]</body><body package="VirusNoysters" selector="generatePreferentialAttachmentNetworkFlatProbabilities">generatePreferentialAttachmentNetworkFlatProbabilities		| nonConnected connected anAgent hisNewFriend aFriendlessAgent |	nonConnected := self theAgents.	connected := OrderedCollection new.	anAgent := Cormas selectRandomlyFrom: nonConnected.	connected add: anAgent.	nonConnected remove: anAgent.	[nonConnected isEmpty]		whileFalse:			[aFriendlessAgent := Cormas selectRandomlyFrom: nonConnected.			hisNewFriend := Cormas selectRandomlyFrom: connected.			self addFriends: aFriendlessAgent newFriend: hisNewFriend.			nonConnected remove: aFriendlessAgent.			connected add: aFriendlessAgent]</body><body package="VirusNoysters" selector="generatePreferentialAttachmentNetworkStrongProbabilities">generatePreferentialAttachmentNetworkStrongProbabilities	"On cree un graphe complet a i agents. On rajoute les agents petit a petit en leur rajoutant i liens avec les autres agents avec une probabilite nbAmis / nbTotalLiens"		| nonConnected connected anAgent hisNewFriend aFriendlessAgent |	nonConnected := self theAgents.	connected := OrderedCollection new.	anAgent := Cormas selectRandomlyFrom: nonConnected.	connected add: anAgent.	nonConnected remove: anAgent.	[nonConnected isEmpty]		whileFalse:			[aFriendlessAgent := Cormas selectRandomlyFrom: nonConnected.			hisNewFriend := Cormas selectRandomlyFrom: connected.			self addFriends: aFriendlessAgent newFriend: hisNewFriend.			nonConnected remove: aFriendlessAgent.			connected add: aFriendlessAgent]</body><body package="VirusNoysters" selector="generatePreferentialAttachmentNetworkStrongProbabilities:">generatePreferentialAttachmentNetworkStrongProbabilities: i	"On cree un graphe complet a i agents. On rajoute les agents petit a petit en leur rajoutant i liens avec les autres agents avec une probabilite nbAmis / nbTotalLiens"	"Pas fini"		| nonConnected connected anAgent aFriendlessAgent nbEdges newFriends |	i &lt;= self theAgents size ifFalse:[self halt.].	nonConnected := self theAgents.	connected := OrderedCollection new. "On cree le graphe complet initial"	1 to: i do: [:k | anAgent := Cormas selectRandomlyFrom: nonConnected.	connected add: anAgent.	nonConnected remove: anAgent].	self generateCompleteNetworkForCollection: connected.	nbEdges := connected size * (connected size -1) / 2.	newFriends := OrderedCollection new.	[nonConnected isEmpty]		whileFalse:			[aFriendlessAgent := Cormas selectRandomlyFrom: nonConnected.			nonConnected remove: aFriendlessAgent.			newFriends := self selectFriendsNumber: i withEdges: nbEdges from: connected.			self addFriend: aFriendlessAgent aCollectionOfFriends: newFriends.						connected add: aFriendlessAgent.			newFriends removeAll.]</body><body package="VirusNoysters" selector="selectFriendsNumber:withEdges:from:">selectFriendsNumber: i withEdges: n from: aCollection	"A checker"	| m coll friends r f j |	m := n.	coll := aCollection.	friends := OrderedCollection new.	1 to: i do:		[:k | 	r := Cormas randomIntegerFrom: 1 to: m.				f := 0.				j := 0.				[r &gt; j] whileTrue: [f := f+1. j := j + (coll at: f) acquaintances size. ].				friends add: (coll at: f).				m := m - ((coll at: f) acquaintances size).				coll remove: (coll at: f). ].	self halt.	^friends.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters</class-id> <category>default values</category><body package="VirusNoysters" selector="hiddenAttributes">hiddenAttributes"returns a list of hidden attributs that are not displayed by the parameter interface.This method is automatically generated by the Parameters interface."	| aList cav |	aList := List new.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Water attribute: #nbBatchesKilled value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Farmer attribute: #wallet value: 10000.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid class attribute: #chromosome value: 3.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid class attribute: #weightSellable value: 18.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid class attribute: #type value: 'triplo'.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid class attribute: #maxGrowth value: 3.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid attribute: #weight value: 3.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid attribute: #isSellable value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Triploid attribute: #killedByVirus value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Natural class attribute: #weightSellable value: 36.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Natural class attribute: #maxGrowth value: 3.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Natural attribute: #weight value: 3.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Natural attribute: #isSellable value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Natural attribute: #killedByVirus value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Diploid class attribute: #weightSellable value: 36.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Diploid class attribute: #maxGrowth value: 3.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Diploid attribute: #weight value: 6.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Diploid attribute: #isSellable value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Diploid attribute: #killedByVirus value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Market class attribute: #sizeBatch value: 1000.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Observation class attribute: #nbClasses value: 5.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Observation attribute: #initialBelief value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Observation attribute: #tableCapacity value: 20.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table class attribute: #carryingCapacity value: 20.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #isFull value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #nbOysters value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #nbDiplo value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #nbTriplo value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #ratioDiploDead value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #ratioTriploDead value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #nbNat value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #ratioNatDead value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #nbBatches value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #natDead value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #diploDead value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Table attribute: #triploDead value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision class attribute: #satisfied value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #shareTriplo value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #shareDiplo value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #idealQtyTriplo value: 5000.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #idealQtyDiplo value: 5000.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #idealQtyNat value: 5000.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #shareNat value: 0.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #changeMix value: false.	cav isHidden: true.	aList add: cav.	cav := ClassAttributeValue newClass: CormasNS.Models.VirusNoysters.Decision attribute: #expectedOutcome value: 0.	cav isHidden: true.	aList add: cav.	^aList</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters class</class-id> <category>description</category><body package="VirusNoysters" selector="authors">authors^ 'Nicolas Paget'	</body><body package="VirusNoysters" selector="comments">comments^ 'This model investigates how information sharing can influence oyster farmers reaction when attacked by a nasty virus.Several scenarios of information sharing and virus modus operandi are tested.'	</body><body package="VirusNoysters" selector="cormasCompatibleVersion">cormasCompatibleVersion^ #(2014 5 14 10 11 0)</body><body package="VirusNoysters" selector="creationDate">creationDate^ 'February 11, 2015'	</body><body package="VirusNoysters" selector="currentDeveloperName">currentDeveloperName^ 'Nicolas Paget'	</body><body package="VirusNoysters" selector="emails">emails^ 'nicolas.paget@irstea.fr'	</body><body package="VirusNoysters" selector="lastUpdate">lastUpdate^ 'June 16, 2015'	</body><body package="VirusNoysters" selector="version">version^ 'VirusNoystersAffineCommeUnCantal.pcl'	</body><body package="VirusNoysters" selector="versionComments">versionComments^ '  --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0Les ostreiculteurs peuvent maintenant vendre leurs hutitres, manque plus qu"a les racheter ... *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0Les ostreiculteurs peuvent acheter des huitres, en s"endettant un peu. Par contre, il faut verifier que ca marche bien comme il faut *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0Bug dans la methode d"achat *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0Vente et achat ok *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0Improvements in init: tables are localised. Init seems to be working. *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0On recommence. Les processus sur les huitres sont en cours. Il y a un total de nourriture disponible, elles mangent, grossissent en fonction de la disponibilite. La suite : les interventions des ostreiculteurs. *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0Les ostreiculteurs vendent leurs huitres pretes. Par contre, elles restent presentes dans le modele. Comment supprimer les objets? *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoysters.pcl --------------------- Date: 2014.5.14 - 10:11:0Farms added *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0Farm entity included in treatment. Improvements in initialization. Memory is now active. *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0En cours : addition d"un reseau social *** Developer: Nicolas Paget *** --------------------- VirusNoystersBeforeDoingStupidThings.pcl --------------------- Date: 2014.5.14 - 10:11:0Network ajoute *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithLotsOfHalts.pcl --------------------- Date: 2014.5.14 - 10:11:0Simple decision making for economicus is being implemented. New Decision class *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithLessHalts.pcl --------------------- Date: 2014.5.14 - 10:11:0Decision is getting better: they buy Triploids while they can to refill tables *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithLotsOfHalts.pcl --------------------- Date: 2014.5.14 - 10:11:0Un scenario de mortalite est ajoute *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithLotsOfHalts.pcl --------------------- Date: 2014.5.14 - 10:11:0Virus is working better. Attention : comptes mortalite errones *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithLessHalts.pcl --------------------- Date: 2014.5.14 - 10:11:0Virus seems to be working well *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithMessages --------------------- Date: 2014.5.14 - 10:11:0Message implementation *** Developer: Nicolas Paget *** --------------------- VirusNoystersMessageAndIS.pcl --------------------- Date: 2014.5.14 - 10:11:0New classes: Observation and Friend that gathers observations and friends observations.New methods: updateObservation (only with triplo), sendInfoToFriends (in a Friend object), sendInfoToISS, stepIS (averages stuff), readInfoFromIS. *** Developer: Nicolas Paget *** --------------------- VirusNoystersMessageAndISwithBugs.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersMessageAndIS.pcl --------------------- Date: 2014.5.14 - 10:11:0Bugs fixed, things seem to be smooth *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithDensity.pcl --------------------- Date: 2014.5.14 - 10:11:0Density is being added. Observations with mortality = f(density) *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithDensityAndBugs.pcl --------------------- Date: 2014.5.14 - 10:11:0Getting better.  *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithDensity.pcl --------------------- Date: 2014.5.14 - 10:11:0Correction de bug sur la moyenne.A faire : partage entre amis et avec le SI. Puis prise de decision et hop hop hop ! *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithDensityAndFriends.pcl --------------------- Date: 2014.5.14 - 10:11:0Exchange info among friends as well. IS is still missing. *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithDensityAndFriendsAndIS.pcl --------------------- Date: 2014.5.14 - 10:11:0Information sharing added *** Developer: Nicolas Paget *** --------------------- VirusNoystersClassesRemovedWithoutProperDecisionMaking.pcl --------------------- Date: 2014.5.14 - 10:11:0Memory and Pub classes removed.Desperately need for a decision making model!!!!!! *** Developer: Nicolas Paget *** --------------------- VirusNoystersNewVirus.pcl --------------------- Date: 2014.5.14 - 10:11:0New virus is being introduced. *** Developer: Nicolas Paget *** --------------------- VirusNoystersNewInit.pcl --------------------- Date: 2014.5.14 - 10:11:0Initialization taking into account types, mixes *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithProperBeliefUpdate.pcl --------------------- Date: 2014.5.14 - 10:11:0Improvements in step, proper belief average. *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithProperBeliefUpdateAndNoNil.pcl --------------------- Date: 2014.5.14 - 10:11:0Beliefs could contain nil values, they are replaced by old values *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithQtyUpdate.pcl --------------------- Date: 2014.5.14 - 10:11:0Update quantities *** Developer: Nicolas Paget *** --------------------- VirusNoystersWithMixChoice.pcl --------------------- Date: 2014.5.14 - 10:11:0Fonction de selection de mix ajoutee *** Developer: Nicolas Paget *** --------------------- VirusNoystersCanBuyMeOysters.pcl --------------------- Date: 2014.5.14 - 10:11:0OF can buy oysters, need to make things better *** Developer: Nicolas Paget *** --------------------- VirusNoystersRegularNetwork.pcl --------------------- Date: 2014.5.14 - 10:11:0Addition of regular network *** Developer: Nicolas Paget *** --------------------- VirusNoystersRegularNetwork.pcl --------------------- Date: 2014.5.14 - 10:11:0Regular networks work *** Developer: Nicolas Paget *** --------------------- VirusNoystersPreferentialNetwork.pcl --------------------- Date: 2014.5.14 - 10:11:0Preferential attachement added *** Developer: Nicolas Paget *** --------------------- VirusNoystersMixEvolution.pcl --------------------- Date: 2014.5.14 - 10:11:0Evolution des mix *** Developer: Nicolas Paget *** --------------------- VirusNoystersAlittleMoreAdvanced.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersRefonteTraitementInformation.pcl --------------------- Date: 2014.5.14 - 10:11:0Les classes de niveaux de mortalite se font maintenant toutes seules *** Developer: Nicolas Paget *** --------------------- VirusNoystersAvancees.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersProbesEnTousGenres.pcl --------------------- Date: 2014.5.14 - 10:11:0De nombreuses nouvelles probes *** Developer: Nicolas Paget *** --------------------- VirusNoystersProbesEnTousGenres.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersAvanceesInfo.pcl --------------------- Date: 2014.5.14 - 10:11:0 *** Developer: Nicolas Paget *** --------------------- VirusNoystersAffinages.pcl --------------------- Date: 2014.5.14 - 10:11:0Beliefs aggregation different en fonction des shares *** Developer: Nicolas Paget ***'	</body><body package="VirusNoysters" selector="vwCompatibleVersion">vwCompatibleVersion^ '7.6'	</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters class</class-id> <category>- default value</category><body package="VirusNoysters" selector="nbEdgesArrival_default">nbEdgesArrival_default 	"Return the default value of attribute #nbEdgesArrival : 2.		!! This method was automatically generated by Cormas !!"	^2</body><body package="VirusNoysters" selector="nbEgdesArrival_default">nbEgdesArrival_default 	"Return the default value of attribute #nbEgdesArrival : 2.		!! This method was automatically generated by Cormas !!"	^2</body><body package="VirusNoysters" selector="nbFarmers_default">nbFarmers_default 	"Return the default value of attribute #nbFarmers : 30.		!! This method was automatically generated by Cormas !!"	^30</body><body package="VirusNoysters" selector="nbFriendsPerSide_default">nbFriendsPerSide_default 	"Return the default value of attribute #nbFriendsPerSide : 2.		!! This method was automatically generated by Cormas !!"	^2</body><body package="VirusNoysters" selector="nbFriends_default">nbFriends_default 	"Return the default value of attribute #nbFriends : 2.		!! This method was automatically generated by Cormas !!"	^2</body><body package="VirusNoysters" selector="shareConservative_default">shareConservative_default 	"Return the default value of attribute #shareConservative : 0.4.		!! This method was automatically generated by Cormas !!"	^0.4</body><body package="VirusNoysters" selector="shareEconomicus_default">shareEconomicus_default 	"Return the default value of attribute #shareEconomicus : 0.5.		!! This method was automatically generated by Cormas !!"	^0.5</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters class</class-id> <category>- probes</category><body package="VirusNoysters" selector="colorOfProbe_averageBeliefTriploMortalityOfMemorys">colorOfProbe_averageBeliefTriploMortalityOfMemorys  ^ ColorValue red</body><body package="VirusNoysters" selector="colorOfProbe_averageIdealQtyDiploOfDecisions">colorOfProbe_averageIdealQtyDiploOfDecisions  ^ ColorValue red</body><body package="VirusNoysters" selector="colorOfProbe_averageIdealQtyNatOfDecisions">colorOfProbe_averageIdealQtyNatOfDecisions  ^ ColorValue royalBlue</body><body package="VirusNoysters" selector="colorOfProbe_averageIdealQtyTriploOfDecisions">colorOfProbe_averageIdealQtyTriploOfDecisions  ^ ColorValue salmon</body><body package="VirusNoysters" selector="colorOfProbe_averageSizeOfDiploids">colorOfProbe_averageSizeOfDiploids  ^ ColorValue springGreen</body><body package="VirusNoysters" selector="colorOfProbe_averageSizeOfNaturals">colorOfProbe_averageSizeOfNaturals  ^ ColorValue veryDarkGray</body><body package="VirusNoysters" selector="colorOfProbe_averageSizeOfTriploids">colorOfProbe_averageSizeOfTriploids  ^ ColorValue veryLightGray</body><body package="VirusNoysters" selector="colorOfProbe_averageWeightOfOysters">colorOfProbe_averageWeightOfOysters  ^ (ColorValue red: 0.562447 green: 0.125015 blue: 1.0)</body><body package="VirusNoysters" selector="colorOfProbe_mortalityRateDIplo">colorOfProbe_mortalityRateDIplo  ^ ColorValue black</body><body package="VirusNoysters" selector="colorOfProbe_mortalityRateNat">colorOfProbe_mortalityRateNat  ^ ColorValue blue</body><body package="VirusNoysters" selector="colorOfProbe_mortalityRateTrIplo">colorOfProbe_mortalityRateTrIplo  ^ ColorValue brown</body><body package="VirusNoysters" selector="colorOfProbe_nbConscious">colorOfProbe_nbConscious  ^ ColorValue chartreuse</body><body package="VirusNoysters" selector="colorOfProbe_nbConservative">colorOfProbe_nbConservative  ^ ColorValue cyan</body><body package="VirusNoysters" selector="colorOfProbe_nbEconomicus">colorOfProbe_nbEconomicus  ^ ColorValue darkCyan</body><body package="VirusNoysters" selector="colorOfProbe_numberMaxOfBatches">colorOfProbe_numberMaxOfBatches  ^ ColorValue darkGray</body><body package="VirusNoysters" selector="colorOfProbe_numberOfDiploids">colorOfProbe_numberOfDiploids  ^ ColorValue darkGreen</body><body package="VirusNoysters" selector="colorOfProbe_numberOfNaturals">colorOfProbe_numberOfNaturals  ^ ColorValue darkMagenta</body><body package="VirusNoysters" selector="colorOfProbe_numberOfOysters">colorOfProbe_numberOfOysters  ^ ColorValue darkRed</body><body package="VirusNoysters" selector="colorOfProbe_numberOfTables">colorOfProbe_numberOfTables  ^ ColorValue gray</body><body package="VirusNoysters" selector="colorOfProbe_numberOfTriploids">colorOfProbe_numberOfTriploids  ^ ColorValue green</body><body package="VirusNoysters" selector="colorOfProbe_sumChangeMixOfDecisions">colorOfProbe_sumChangeMixOfDecisions  ^ ColorValue lightCyan</body><body package="VirusNoysters" selector="colorOfProbe_sumDiploDeadOfTables">colorOfProbe_sumDiploDeadOfTables  ^ ColorValue lightGray</body><body package="VirusNoysters" selector="colorOfProbe_sumDiploDeadTableOfTables">colorOfProbe_sumDiploDeadTableOfTables  ^ ColorValue lightGray</body><body package="VirusNoysters" selector="colorOfProbe_sumNatDeadOfTables">colorOfProbe_sumNatDeadOfTables  ^ (ColorValue red: 1.0 green: 0.749969 blue: 0.500061)</body><body package="VirusNoysters" selector="colorOfProbe_sumNatDeadTableOfTables">colorOfProbe_sumNatDeadTableOfTables  ^ ColorValue lightYellow</body><body package="VirusNoysters" selector="colorOfProbe_sumNbBatchesKilledOfWaters">colorOfProbe_sumNbBatchesKilledOfWaters  ^ ColorValue magenta</body><body package="VirusNoysters" selector="colorOfProbe_sumNbBatchesOfTables">colorOfProbe_sumNbBatchesOfTables  ^ ColorValue navy</body><body package="VirusNoysters" selector="colorOfProbe_sumNbDiploOfTables">colorOfProbe_sumNbDiploOfTables  ^ ColorValue olive</body><body package="VirusNoysters" selector="colorOfProbe_sumNbDiploTableOfTables">colorOfProbe_sumNbDiploTableOfTables  ^ ColorValue olive</body><body package="VirusNoysters" selector="colorOfProbe_sumNbNatOfTables">colorOfProbe_sumNbNatOfTables  ^ ColorValue orange</body><body package="VirusNoysters" selector="colorOfProbe_sumNbNatTableOfTables">colorOfProbe_sumNbNatTableOfTables  ^ ColorValue orange</body><body package="VirusNoysters" selector="colorOfProbe_sumNbTriploFarmOfFarms">colorOfProbe_sumNbTriploFarmOfFarms  ^ ColorValue royalBlue</body><body package="VirusNoysters" selector="colorOfProbe_sumNbTriploOfTables">colorOfProbe_sumNbTriploOfTables  ^ ColorValue orchid</body><body package="VirusNoysters" selector="colorOfProbe_sumNbTriploTableOfTables">colorOfProbe_sumNbTriploTableOfTables  ^ ColorValue orchid</body><body package="VirusNoysters" selector="colorOfProbe_sumTriploDeadFarmOfFarms">colorOfProbe_sumTriploDeadFarmOfFarms  ^ ColorValue salmon</body><body package="VirusNoysters" selector="colorOfProbe_sumTriploDeadOfTables">colorOfProbe_sumTriploDeadOfTables  ^ ColorValue paleGreen</body><body package="VirusNoysters" selector="colorOfProbe_sumTriploDeadTableOfTables">colorOfProbe_sumTriploDeadTableOfTables  ^ ColorValue paleGreen</body><body package="VirusNoysters" selector="colorOfProbe_sumWalletOfFarmers">colorOfProbe_sumWalletOfFarmers  ^ ColorValue pink</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.VirusNoysters class</class-id> <category>accessing</category><body package="VirusNoysters" selector="shareConservative">shareConservative	"Getter accessor with default value = 0.4.	!! This method was automatically generated by Cormas !!"	^shareConservative ifNil:[shareConservative := 0.4]</body><body package="VirusNoysters" selector="shareConservative:">shareConservative: anObject	"Setter accessor of attribute shareConservative. 	!! This method was automatically generated by Cormas !!  "	shareConservative := anObject</body><body package="VirusNoysters" selector="shareEconomicus">shareEconomicus	"Getter accessor with default value = 0.5.	!! This method was automatically generated by Cormas !!"	^shareEconomicus ifNil:[shareEconomicus := 0.5]</body><body package="VirusNoysters" selector="shareEconomicus:">shareEconomicus: anObject	"Setter accessor of attribute shareEconomicus. 	!! This method was automatically generated by Cormas !!  "	shareEconomicus := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem</class-id> <category>control</category><body package="VirusNoysters" selector="stepIS:">stepIS: t	self allRaw: self collectDataFromThoseWhoShare.	self processAllData</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem</class-id> <category>accessing</category><body package="VirusNoysters" selector="allRaw">allRaw	"Getter accessor without default value "	^allRaw</body><body package="VirusNoysters" selector="allRaw:">allRaw: anObject	"Setter accessor of attribute allRaw. 	!! This method was automatically generated by Cormas !!  "	allRaw := anObject</body><body package="VirusNoysters" selector="farmers">farmers	"Getter accessor without default value "	^farmers</body><body package="VirusNoysters" selector="farmers:">farmers: anObject	"Setter accessor of attribute farmers. 	!! This method was automatically generated by Cormas !!  "	farmers := anObject</body><body package="VirusNoysters" selector="isObs">isObs	"Getter accessor without default value "	^isObs</body><body package="VirusNoysters" selector="isObs:">isObs: anObject	"Setter accessor of attribute isObs. 	!! This method was automatically generated by Cormas !!  "	isObs := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem</class-id> <category>initialize-release</category><body package="VirusNoysters" selector="initIS">initIS	"Attention !! Ne fonctionne que pour 5 classes"		| empty |	self		isObs:			(Dictionary withKeysAndValues: #(#isTriplo nil #isDiplo nil #isNat nil)).	empty := OrderedCollection new.	1		to: 5		do: [:i | empty add: 0].	self isObs at: #isTriplo put: empty.	self isObs at: #isDiplo put: empty.	self isObs at: #isNat put: empty</body><body package="VirusNoysters" selector="initSIMaxOysters:maxBatchesTable:">initSIMaxOysters: zeSizeMax maxBatchesTable: zeCarryingCapacity		self		isObs:			(Dictionary withKeysAndValues: #(#isTriplo nil #isDiplo nil #isNat nil))		</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem</class-id> <category>collectionMethod</category><body package="VirusNoysters" selector="average:">average: aCollection		| avg nbObs |	avg := 0.	nbObs := 0.	aCollection		do:			[:c | 			c isNil				ifFalse:					[avg := avg + c.					nbObs := nbObs + 1]].	nbObs = 0		ifTrue: [^nil]		ifFalse: [^avg / nbObs]</body><body package="VirusNoysters" selector="makeItMonotonous:">makeItMonotonous: aCollec	aCollec size &gt; 2		ifTrue:			[2				to: aCollec size				do:					[:i | 					(aCollec at: i - 1) &gt; (aCollec at: i)						ifTrue:							[aCollec								at: i								put: (aCollec at: i - 1)]]].	^aCollec</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem</class-id> <category>dataProcessing</category><body package="VirusNoysters" selector="averageClassesExcludingZeros:">averageClassesExcludingZeros: aCollecOfCollec	"calcule la moyenne terme a terme d'une collection de collections de meme longueur. On ne prend pas en compte les 0 qu'on considere comme des non observations sauf si tous les nombres sont nuls ce qu'on considere alors comme une mortalite.Meme methode dans Observation!!!!"		| size avg i temp value |	size := aCollecOfCollec first size.	avg := OrderedCollection new.	i := 1.	size		timesRepeat:			[temp := OrderedCollection new.			aCollecOfCollec do: [:c | (c at: i) = 0 ifFalse: [temp add: (c at: i)]]. "On ne tient compte que des non nuls."			temp isEmpty				ifTrue: [avg add: 0] "sauf s'ils sont tous nuls (dans ce cas, on n'a rien ajoute dans temp"				ifFalse:					[value := self average: temp. "s'ils ne sont pas tous nuls, on en fait la moyenne"					avg add: value].			i := i + 1].	^avg</body><body package="VirusNoysters" selector="collectDataFromThoseWhoShare">collectDataFromThoseWhoShare		| observations |	observations := OrderedCollection new.	self farmers		do:			[:f | 			f myObservation shareIS &gt; 0				ifTrue: [observations add: f myObservation perso]].	^observations</body><body package="VirusNoysters" selector="processAllData">processAllData	| triplo diplo nat triploRaw diploRaw natRaw |	triploRaw := OrderedCollection new.	diploRaw := OrderedCollection new.	natRaw := OrderedCollection new.	triplo := OrderedCollection new.	diplo := OrderedCollection new.	nat := OrderedCollection new.	self allRaw		do:			[:f | 			triploRaw add: (f at: #persoTriplo).			diploRaw add: (f at: #persoDiplo).			natRaw add: (f at: #persoNat)].	triplo := self averageClassesExcludingZeros: triploRaw.	diplo := self averageClassesExcludingZeros: diploRaw.	nat := self averageClassesExcludingZeros: natRaw.	triplo := self makeItMonotonous: triplo.	diplo := self makeItMonotonous: diplo.	nat := self makeItMonotonous: nat.	self isObs at: #isTriplo put: triplo.	self isObs at: #isDiplo put: diplo.	self isObs at: #isNat put: nat</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem</class-id> <category>probes</category><body package="VirusNoysters" selector="pISdiplo1">pISdiplo1	(self isObs at: #isDiplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isDiplo) at: 1]</body><body package="VirusNoysters" selector="pISdiplo2">pISdiplo2	(self isObs at: #isDiplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isDiplo) at: 2]</body><body package="VirusNoysters" selector="pISdiplo3">pISdiplo3	(self isObs at: #isDiplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isDiplo) at: 3]</body><body package="VirusNoysters" selector="pISdiplo4">pISdiplo4	(self isObs at: #isDiplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isDiplo) at: 4]</body><body package="VirusNoysters" selector="pISdiplo5">pISdiplo5	(self isObs at: #isDiplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isDiplo) at: 5]</body><body package="VirusNoysters" selector="pISnat1">pISnat1	(self isObs at: #isNat) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isNat) at: 1]</body><body package="VirusNoysters" selector="pISnat2">pISnat2	(self isObs at: #isNat) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isNat) at: 2]</body><body package="VirusNoysters" selector="pISnat3">pISnat3	(self isObs at: #isNat) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isNat) at: 3]</body><body package="VirusNoysters" selector="pISnat4">pISnat4	(self isObs at: #isNat) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isNat) at: 4]</body><body package="VirusNoysters" selector="pISnat5">pISnat5	(self isObs at: #isNat) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isNat) at: 5]</body><body package="VirusNoysters" selector="pIStriplo1">pIStriplo1		(self isObs at: #isTriplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isTriplo) at: 1]</body><body package="VirusNoysters" selector="pIStriplo2">pIStriplo2		(self isObs at: #isTriplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isTriplo) at: 2]</body><body package="VirusNoysters" selector="pIStriplo3">pIStriplo3		(self isObs at: #isTriplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isTriplo) at: 3]</body><body package="VirusNoysters" selector="pIStriplo4">pIStriplo4		(self isObs at: #isTriplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isTriplo) at: 4]</body><body package="VirusNoysters" selector="pIStriplo5">pIStriplo5		(self isObs at: #isTriplo) isNil		ifTrue: [^0]		ifFalse: [^(self isObs at: #isTriplo) at: 5]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.InfoSystem class</class-id> <category>- default value</category><body package="VirusNoysters" selector="allRaw_default">allRaw_default 	"Return the default value of attribute #allRaw : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="farmers_default">farmers_default 	"Return the default value of attribute #farmers : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="isObs_default">isObs_default 	"Return the default value of attribute #isObs : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster</class-id> <category>accessing</category><body package="VirusNoysters" selector="isSellable">isSellable	"Getter accessor with default value = false. 	!! This method was automatically generated by Cormas !! "	^isSellable ifNil:[isSellable := false]</body><body package="VirusNoysters" selector="isSellable:">isSellable: anObject	"Setter accessor of attribute isSellable. 	!! This method was automatically generated by Cormas !!  "	isSellable := anObject</body><body package="VirusNoysters" selector="killedByVirus">killedByVirus	"Getter accessor with default value = false. 	!! This method was automatically generated by Cormas !! "	^killedByVirus ifNil:[killedByVirus := false]</body><body package="VirusNoysters" selector="killedByVirus:">killedByVirus: anObject	"Setter accessor of attribute killedByVirus. 	!! This method was automatically generated by Cormas !!  "	killedByVirus := anObject</body><body package="VirusNoysters" selector="size">size	"Getter accessor without default value "	^size</body><body package="VirusNoysters" selector="size:">size: anObject	"Setter accessor of attribute size. 	!! This method was automatically generated by Cormas !!  "	size := anObject</body><body package="VirusNoysters" selector="table">table	"Getter accessor without default value "	^table</body><body package="VirusNoysters" selector="table:">table: anObject	"Setter accessor of attribute table. 	!! This method was automatically generated by Cormas !!  "	table := anObject</body><body package="VirusNoysters" selector="weight">weight	"Getter accessor with default value = 0. 	!! This method was automatically generated by Cormas !! "	^weight ifNil:[weight := 0]</body><body package="VirusNoysters" selector="weight:">weight: anObject	"Setter accessor of attribute age. 	!! This method was automatically generated by Cormas !!  "	weight := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster</class-id> <category>init</category><body package="VirusNoysters" selector="initOyster">initOyster		self		initOysterSize: 10000.</body><body package="VirusNoysters" selector="initOysterSize:">initOysterSize: s	"Avec une taille definie"		self size: s.	self isSellable: self weight = self class weightSellable</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster</class-id> <category>growOrDie</category><body package="VirusNoysters" selector="grow">grow	"On ne tient pas en compte des nutriments dispo, les huitres grossissent uniformement."	self weight: self weight + self class maxGrowth.</body><body package="VirusNoysters" selector="growWithNutrients">growWithNutrients	"Their growth depends on the total availability of nutrients on their patch"		| availableNutrient |	availableNutrient := self table availableNutrientsPerOyster.	availableNutrient &gt; self class maxGrowth		ifTrue: [self weight: self weight + self class maxGrowth]		ifFalse: [self weight: self weight + availableNutrient]</body><body package="VirusNoysters" selector="updateDead">updateDead		self killedByVirus ifTrue: [self dead: true]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster</class-id> <category>market</category><body package="VirusNoysters" selector="updateSellable">updateSellable		self isSellable		ifFalse: [self isSellable: self weight &gt; self class weightSellable]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster</class-id> <category>control</category><body package="VirusNoysters" selector="removeOyster">removeOyster	"self killedByVirus ifTrue:[self halt]."	((self isSellable or:[self killedByVirus]) and:[self dead not]) ifTrue:[self dead: true].</body><body package="VirusNoysters" selector="stepOyster">stepOyster		self updateDead.	self weight = nil ifTrue: [self halt].	self dead		ifFalse:			[self grow.			self updateSellable]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^true</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster class</class-id> <category>accessing</category><body package="VirusNoysters" selector="chromosome">chromosome	"Getter accessor without default value "	^chromosome</body><body package="VirusNoysters" selector="chromosome:">chromosome: anObject	"Setter accessor of attribute chromosome. 	!! This method was automatically generated by Cormas !!  "	chromosome := anObject</body><body package="VirusNoysters" selector="maxGrowth">maxGrowth	"Getter accessor with default value = 3. 	!! This method was automatically generated by Cormas !! "	^maxGrowth ifNil:[maxGrowth := 3]</body><body package="VirusNoysters" selector="maxGrowth:">maxGrowth: anObject	"Setter accessor of attribute maxGrowth. 	!! This method was automatically generated by Cormas !!  "	maxGrowth := anObject</body><body package="VirusNoysters" selector="sizeMaxOysterBatch">sizeMaxOysterBatch	"Getter accessor with default value = 10000. 	!! This method was automatically generated by Cormas !! "	^sizeMax ifNil:[sizeMax := 10000]</body><body package="VirusNoysters" selector="sizeMaxOysterBatch:">sizeMaxOysterBatch: anObject	"Setter accessor of attribute tailleMax. 	!! This method was automatically generated by Cormas !!  "	sizeMax := anObject</body><body package="VirusNoysters" selector="type">type	"Getter accessor without default value "	^type</body><body package="VirusNoysters" selector="type:">type: anObject	"Setter accessor of attribute type. 	!! This method was automatically generated by Cormas !!  "	type := anObject</body><body package="VirusNoysters" selector="weightSellable">weightSellable	"Getter accessor without default value "	^weightSellable</body><body package="VirusNoysters" selector="weightSellable:">weightSellable: anObject	"Setter accessor of attribute ageSellable. 	!! This method was automatically generated by Cormas !!  "	weightSellable := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Oyster class</class-id> <category>- default value</category><body package="VirusNoysters" selector="ageSellable_default">ageSellable_default 	"Return the default value of attribute #ageSellable : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="age_default">age_default 	"Return the default value of attribute #age : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="chromosome_default">chromosome_default 	"Return the default value of attribute #chromosome : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="isSellable_default">isSellable_default 	"Return the default value of attribute #isSellable : false.		!! This method was automatically generated by Cormas !!"	^false</body><body package="VirusNoysters" selector="killedByVirus_default">killedByVirus_default 	"Return the default value of attribute #killedByVirus : false.		!! This method was automatically generated by Cormas !!"	^false</body><body package="VirusNoysters" selector="maxGrowth_default">maxGrowth_default 	"Return the default value of attribute #maxGrowth : 3.		!! This method was automatically generated by Cormas !!"	^3</body><body package="VirusNoysters" selector="sizeMax_default">sizeMax_default 	"Return the default value of attribute #sizeMax : 10000.		!! This method was automatically generated by Cormas !!"	^10000</body><body package="VirusNoysters" selector="size_default">size_default 	"Return the default value of attribute #size : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="table_default">table_default 	"Return the default value of attribute #table : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="tailleMax_default">tailleMax_default 	"Return the default value of attribute #tailleMax : 10000.		!! This method was automatically generated by Cormas !!"	^10000</body><body package="VirusNoysters" selector="type_default">type_default 	"Return the default value of attribute #type : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="weightSellable_default">weightSellable_default 	"Return the default value of attribute #weightSellable : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="weight_default">weight_default 	"Return the default value of attribute #weight : 0.		!! This method was automatically generated by Cormas !!"	^0</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Hatchery class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^true</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Hatchery class</class-id> <category>accessing</category><body package="VirusNoysters" selector="prix">prix	"Getter accessor without default value "	^prix</body><body package="VirusNoysters" selector="prix:">prix: anObject	"Setter accessor of attribute prix. 	!! This method was automatically generated by Cormas !!  "	prix := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Hatchery class</class-id> <category>- default value</category><body package="VirusNoysters" selector="prix_default">prix_default 	"Return the default value of attribute #prix : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>control</category><body package="VirusNoysters" selector="updateBeliefs">updateBeliefs	"Chooses the proper method according to which agregate information, taking into account only what counts!"		self shareFriends = 0		ifTrue:			[self shareIS = 0				ifTrue: [self updateBeliefsNoNetworkNoIS]				ifFalse: [self updateBeliefsNoNetwork]]		ifFalse:			[self shareIS = 0				ifTrue: [self updateBeliefsNoIS]				ifFalse: [self updateBeliefsNormal]]</body><body package="VirusNoysters" selector="updateBeliefsNoIS">updateBeliefsNoIS	"Collects observations from different sources (self, friends) and compiles them using weights."	| natz triploz diploz belNat belTriplo belDiplo |		natz := OrderedCollection new.	triploz := OrderedCollection new.	diploz := OrderedCollection new.	natz add: (self perso at: #persoNat).	natz add: (self friendsObs at: #pubNat).	triploz add: (self perso at: #persoTriplo).	triploz add: (self friendsObs at: #pubTriplo).	diploz add: (self perso at: #persoDiplo).	diploz add: (self friendsObs at: #pubDiplo).	belNat := self weightedAverageCollecOfCollecNoIS: natz.	belTriplo := self weightedAverageCollecOfCollecNoIS: triploz.	belDiplo := self weightedAverageCollecOfCollecNoIS: diploz. 	self beliefs at: #beliefNat put: belNat.	self beliefs at: #beliefTriplo put: belTriplo.	self beliefs at: #beliefDiplo put: belDiplo</body><body package="VirusNoysters" selector="updateBeliefsNoNetwork">updateBeliefsNoNetwork	"Collects observations from different sources (self, ISS) and compiles them using weights."	| IS natz triploz diploz belNat belTriplo belDiplo |	IS := self observationMaker zeIS.		natz := OrderedCollection new.	triploz := OrderedCollection new.	diploz := OrderedCollection new.	natz add: (self perso at: #persoNat).	natz add: (IS isObs at: #isNat).	triploz add: (self perso at: #persoTriplo).	triploz add: (IS isObs at: #isTriplo).	diploz add: (self perso at: #persoDiplo).	diploz add: (IS isObs at: #isDiplo).	belNat := self weightedAverageCollecOfCollecNoNetwork: natz.	belTriplo := self weightedAverageCollecOfCollecNoNetwork: triploz.	belDiplo := self weightedAverageCollecOfCollecNoNetwork: diploz. 	self beliefs at: #beliefNat put: belNat.	self beliefs at: #beliefTriplo put: belTriplo.	self beliefs at: #beliefDiplo put: belDiplo</body><body package="VirusNoysters" selector="updateBeliefsNoNetworkNoIS">updateBeliefsNoNetworkNoIS	"Collects observations from different self only."	self beliefs at: #beliefNat put: (self perso at: #persoNat).	self beliefs at: #beliefTriplo put: (self perso at: #persoTriplo).	self beliefs at: #beliefDiplo put: (self perso at: #persoDiplo)</body><body package="VirusNoysters" selector="updateBeliefsNormal">updateBeliefsNormal	"Collects observations from different sources (self, friends, ISS) and compiles them using weights."	| IS natz triploz diploz belNat belTriplo belDiplo |	IS := self observationMaker zeIS.		natz := OrderedCollection new.	triploz := OrderedCollection new.	diploz := OrderedCollection new.	natz add: (self perso at: #persoNat).	natz add: (self friendsObs at: #pubNat).	natz add: (IS isObs at: #isNat).	triploz add: (self perso at: #persoTriplo).	triploz add: (self friendsObs at: #pubTriplo).	triploz add: (IS isObs at: #isTriplo).	diploz add: (self perso at: #persoDiplo).	diploz add: (self friendsObs at: #pubDiplo).	diploz add: (IS isObs at: #isDiplo).	belNat := self weightedAverageCollecOfCollec: natz.	belTriplo := self weightedAverageCollecOfCollec: triploz.	belDiplo := self weightedAverageCollecOfCollec: diploz. 	self beliefs at: #beliefNat put: belNat.	self beliefs at: #beliefTriplo put: belTriplo.	self beliefs at: #beliefDiplo put: belDiplo</body><body package="VirusNoysters" selector="updateBeliefsSaved">updateBeliefsSaved	"Collects observations from different sources (self, friends, ISS) and compiles them using weights."	| IS natz triploz diploz belNat belTriplo belDiplo |	IS := self observationMaker zeIS.		natz := OrderedCollection new.	triploz := OrderedCollection new.	diploz := OrderedCollection new.	natz add: (self perso at: #persoNat).	natz add: (self friendsObs at: #pubNat).	natz add: (IS isObs at: #isNat).	triploz add: (self perso at: #persoTriplo).	triploz add: (self friendsObs at: #pubTriplo).	triploz add: (IS isObs at: #isTriplo).	diploz add: (self perso at: #persoDiplo).	diploz add: (self friendsObs at: #pubDiplo).	diploz add: (IS isObs at: #isDiplo).	belNat := self weightedAverageCollecOfCollec: natz.	belTriplo := self weightedAverageCollecOfCollec: triploz.	belDiplo := self weightedAverageCollecOfCollec: diploz. 	self beliefs at: #beliefNat put: belNat.	self beliefs at: #beliefTriplo put: belTriplo.	self beliefs at: #beliefDiplo put: belDiplo</body><body package="VirusNoysters" selector="updateFriends">updateFriends		self observationMaker acquaintances isEmpty		ifFalse:			[self friendsRaw: self collectInfoFromFriends.			self processDataFriends]</body><body package="VirusNoysters" selector="updatePerso">updatePerso		| zeTables |	zeTables := self observationMaker myFarm tables.	self persoRaw: (self collectProfileTables: zeTables).	self processDataPerso.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>accessing</category><body package="VirusNoysters" selector="beliefs">beliefs	"Getter accessor without default value "	^beliefs</body><body package="VirusNoysters" selector="beliefs:">beliefs: anObject	"Setter accessor of attribute beliefs. 	!! This method was automatically generated by Cormas !!  "	beliefs := anObject</body><body package="VirusNoysters" selector="farmerPub">farmerPub	"Getter accessor without default value "	^observationMaker</body><body package="VirusNoysters" selector="farmerPub:">farmerPub: anObject	"Setter accessor of attribute farmer. 	!! This method was automatically generated by Cormas !!  "	observationMaker := anObject</body><body package="VirusNoysters" selector="friendsObs">friendsObs	"Getter accessor without default value "	^friendsObs</body><body package="VirusNoysters" selector="friendsObs:">friendsObs: anObject	"Setter accessor of attribute pubObs. 	!! This method was automatically generated by Cormas !!  "	friendsObs := anObject</body><body package="VirusNoysters" selector="friendsRaw">friendsRaw	"Getter accessor without default value "	^friendsRaw</body><body package="VirusNoysters" selector="friendsRaw:">friendsRaw: anObject	"Setter accessor of attribute friendsRaw. 	!! This method was automatically generated by Cormas !!  "	friendsRaw := anObject</body><body package="VirusNoysters" selector="initialBelief">initialBelief	"Getter accessor with default value = 0. 	!! This method was automatically generated by Cormas !! "	^initialBelief ifNil:[initialBelief := 0]</body><body package="VirusNoysters" selector="initialBelief:">initialBelief: anObject	"Setter accessor of attribute initialBelief. 	!! This method was automatically generated by Cormas !!  "	initialBelief := anObject</body><body package="VirusNoysters" selector="limits">limits	"Getter accessor without default value "	^limits</body><body package="VirusNoysters" selector="limits:">limits: anObject	"Setter accessor of attribute limits. 	!! This method was automatically generated by Cormas !!  "	limits := anObject</body><body package="VirusNoysters" selector="observationMaker">observationMaker	"Getter accessor without default value "	^observationMaker</body><body package="VirusNoysters" selector="observationMaker:">observationMaker: anObject	"Setter accessor of attribute farmerObs. 	!! This method was automatically generated by Cormas !!  "	observationMaker := anObject</body><body package="VirusNoysters" selector="perso">perso	"Getter accessor without default value "	^perso</body><body package="VirusNoysters" selector="perso:">perso: anObject	"Setter accessor of attribute perso. 	!! This method was automatically generated by Cormas !!  "	perso := anObject</body><body package="VirusNoysters" selector="persoRaw">persoRaw	"Getter accessor without default value "	^persoRaw</body><body package="VirusNoysters" selector="persoRaw:">persoRaw: anObject	"Setter accessor of attribute persoRaw. 	!! This method was automatically generated by Cormas !!  "	persoRaw := anObject</body><body package="VirusNoysters" selector="shareFriends">shareFriends	"Getter accessor with default value = 0. 	!! This method was automatically generated by Cormas !! "	^shareFriends ifNil:[shareFriends := 0]</body><body package="VirusNoysters" selector="shareFriends:">shareFriends: anObject	"Setter accessor of attribute shareFriends. 	!! This method was automatically generated by Cormas !!  "	shareFriends := anObject</body><body package="VirusNoysters" selector="shareIS">shareIS	"Getter accessor with default value = 0. 	!! This method was automatically generated by Cormas !! "	^shareIS ifNil:[shareIS := 0]</body><body package="VirusNoysters" selector="shareIS:">shareIS: anObject	"Setter accessor of attribute shareIS. 	!! This method was automatically generated by Cormas !!  "	shareIS := anObject</body><body package="VirusNoysters" selector="sharePerso">sharePerso	"Getter accessor with default value = 1. 	!! This method was automatically generated by Cormas !! "	^sharePerso ifNil:[sharePerso := 1]</body><body package="VirusNoysters" selector="sharePerso:">sharePerso: anObject	"Setter accessor of attribute sharePerso. 	!! This method was automatically generated by Cormas !!  "	sharePerso := anObject</body><body package="VirusNoysters" selector="tableCapacity">tableCapacity	"Getter accessor with default value = 20.	!! This method was automatically generated by Cormas !!"	^tableCapacity ifNil:[tableCapacity := 20]</body><body package="VirusNoysters" selector="tableCapacity:">tableCapacity: anObject	"Setter accessor of attribute tableCapacity. 	!! This method was automatically generated by Cormas !!  "	tableCapacity := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>probes</category><body package="VirusNoysters" selector="beliefDiplo1">beliefDiplo1		(self beliefs at: #beliefDiplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefDiplo) at: 1]</body><body package="VirusNoysters" selector="beliefDiplo2">beliefDiplo2		(self beliefs at: #beliefDiplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefDiplo) at: 2]</body><body package="VirusNoysters" selector="beliefDiplo3">beliefDiplo3		(self beliefs at: #beliefDiplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefDiplo) at: 3]</body><body package="VirusNoysters" selector="beliefDiplo4">beliefDiplo4		(self beliefs at: #beliefDiplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefDiplo) at: 4]</body><body package="VirusNoysters" selector="beliefDiplo5">beliefDiplo5		(self beliefs at: #beliefDiplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefDiplo) at: 5]</body><body package="VirusNoysters" selector="beliefNat1">beliefNat1		(self beliefs at: #beliefNat) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefNat) at: 1]</body><body package="VirusNoysters" selector="beliefNat2">beliefNat2		(self beliefs at: #beliefNat) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefNat) at: 2]</body><body package="VirusNoysters" selector="beliefNat3">beliefNat3		(self beliefs at: #beliefNat) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefNat) at: 3]</body><body package="VirusNoysters" selector="beliefNat4">beliefNat4		(self beliefs at: #beliefNat) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefNat) at: 4]</body><body package="VirusNoysters" selector="beliefNat5">beliefNat5		(self beliefs at: #beliefNat) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefNat) at: 5]</body><body package="VirusNoysters" selector="beliefTriplo1">beliefTriplo1		(self beliefs at: #beliefTriplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefTriplo) at: 1]</body><body package="VirusNoysters" selector="beliefTriplo2">beliefTriplo2		(self beliefs at: #beliefTriplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefTriplo) at: 2]</body><body package="VirusNoysters" selector="beliefTriplo3">beliefTriplo3		(self beliefs at: #beliefTriplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefTriplo) at: 3]</body><body package="VirusNoysters" selector="beliefTriplo4">beliefTriplo4		(self beliefs at: #beliefTriplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefTriplo) at: 4]</body><body package="VirusNoysters" selector="beliefTriplo5">beliefTriplo5		(self beliefs at: #beliefTriplo) = #emptyCollection		ifTrue: [^0]		ifFalse: [^(self beliefs at: #beliefTriplo) at: 5]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>processInfo</category><body package="VirusNoysters" selector="collectInfoFromFriends">collectInfoFromFriends	"This method collects processed information from friends. 	perso = {#persoT (%,%,%,%,%) #persoD #persoN} where the percentages are percentages according to batches size."		| friendsObservations |	friendsObservations := OrderedCollection new.	self observationMaker acquaintances		do: [:a | friendsObservations add: a myObservation perso].	^friendsObservations</body><body package="VirusNoysters" selector="collectProfileTables:">collectProfileTables: aCollecOfTables	| profiles |	profiles := OrderedCollection new.	aCollecOfTables do: [:t | profiles add: t profilTable].	^profiles</body><body package="VirusNoysters" selector="processDataFriends">processDataFriends		| triplo diplo nat triploRaw diploRaw natRaw |	triploRaw := OrderedCollection new.	diploRaw := OrderedCollection new.	natRaw := OrderedCollection new.	triplo := OrderedCollection new.	diplo := OrderedCollection new.	nat := OrderedCollection new.	self friendsRaw		do:			[:f | 			triploRaw add: (f at: #persoTriplo).			diploRaw add: (f at: #persoDiplo).			natRaw add: (f at: #persoNat)].	triplo := self averageClassesExcludingZeros: triploRaw.	diplo := self averageClassesExcludingZeros: diploRaw.	nat := self averageClassesExcludingZeros: natRaw.	self friendsObs at: #pubTriplo put: triplo.	self friendsObs at: #pubDiplo put: diplo.	self friendsObs at: #pubNat put: nat.</body><body package="VirusNoysters" selector="processDataPerso">processDataPerso	"persoRaw est une collection qui contient des collections de profils de tables qui contiennent 	profil = (nbTriplo nbDiplo nbNat mortTriplo mortDiplo mortNat)."		| nbTriplo nbDiplo nbNat mortTriplo mortDiplo mortNat moyTriplo moyDiplo moyNat p |	nbTriplo := OrderedCollection new.	nbDiplo := OrderedCollection new.	nbNat := OrderedCollection new.	mortTriplo := OrderedCollection new.	mortDiplo := OrderedCollection new.	mortNat := OrderedCollection new.	1		to: self persoRaw size		do:			[:i | 			p := self persoRaw.			nbTriplo add: ((p at: i) at: 1).			nbDiplo add: ((p at: i) at: 2).			nbNat add: ((p at: i) at: 3).			mortTriplo add: ((p at: i) at: 4).			mortDiplo add: ((p at: i) at: 5).			mortNat add: ((p at: i) at: 6)].	moyTriplo := self averageMortalities: mortTriplo howMuch: nbTriplo.	moyDiplo := self averageMortalities: mortDiplo howMuch: nbDiplo.	moyNat := self averageMortalities: mortNat howMuch: nbNat.	moyTriplo := self		compare: moyTriplo		with: (self perso at: #persoTriplo).	moyDiplo := self		compare: moyDiplo		with: (self perso at: #persoDiplo).	moyNat := self		compare: moyNat		with: (self perso at: #persoNat).	self perso at: #persoTriplo put: moyTriplo.	self perso at: #persoDiplo put: moyDiplo.	self perso at: #persoNat put: moyNat.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>initialize-release</category><body package="VirusNoysters" selector="initObservationMaxOysters:maxBatchesTable:">initObservationMaxOysters: nbOysters maxBatchesTable: nbBatches		| emptyCollection initBelief upperLimit |	self limits: OrderedCollection new.	upperLimit := nbOysters * nbBatches.	1		to: self class nbClasses		do: [:i | self limits add: i / self class nbClasses * upperLimit].	emptyCollection := OrderedCollection new.	initBelief := OrderedCollection new.	self limits size		timesRepeat:			[emptyCollection add: nil.			initBelief add: self initialBelief].	self		perso:			(Dictionary withKeysAndValues:					#(#persoTriplo #emptyCollection #persoDiplo #emptyCollection #persoNat #emptyCollection)).	self perso at: #persoTriplo put: initBelief.	self perso at: #persoDiplo put: initBelief.	self perso at: #persoNat put: initBelief.	self		friendsObs:			(Dictionary withKeysAndValues:					#(#pubTriplo #emptyCollection #pubDiplo #emptyCollection #pubNat #emptyCollection)).	self friendsObs at: #pubTriplo put: initBelief.	self friendsObs at: #pubDiplo put: initBelief.	self friendsObs at: #pubNat put: initBelief.	self		beliefs:			(Dictionary withKeysAndValues:					#(#beliefTriplo #emptyCollection #beliefDiplo #emptyCollection #beliefNat #emptyCollection)).	self beliefs at: #beliefTriplo put: initBelief.	self beliefs at: #beliefDiplo put: initBelief.	self beliefs at: #beliefNat put: initBelief.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>deprecated</category><body package="VirusNoysters" selector="initObservation">initObservation		| emptyCollection initBelief |	self limits: OrderedCollection new. "Attention si on change les classes, il faut aussi changer la methode averageForClasses"	self limits add: self class cThree. 	self limits add: self class cFive.	self limits add: self class cSeven.	self limits add: self class cNine.	self limits add: #more.	emptyCollection := OrderedCollection new.	initBelief := OrderedCollection new.	self limits size		timesRepeat:			[emptyCollection add: nil.			initBelief add: self initialBelief.].		self		perso:			(Dictionary withKeysAndValues:					#(#persoTriplo #emptyCollection #persoDiplo #emptyCollection #persoNat #emptyCollection)).	self perso at: #persoTriplo put: initBelief.	self perso at: #persoDiplo put: initBelief.	self perso at: #persoNat put: initBelief.		self		friendsObs:			(Dictionary withKeysAndValues:					#(#pubTriplo #emptyCollection #pubDiplo #emptyCollection #pubNat #emptyCollection)).	self		beliefs:			(Dictionary withKeysAndValues:					#(#beliefTriplo #emptyCollection #beliefDiplo #emptyCollection #beliefNat #emptyCollection)).</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation</class-id> <category>calculations</category><body package="VirusNoysters" selector="average:">average: aCollection		| avg nbObs |	avg := 0.	nbObs := 0.	aCollection		do:			[:c | 			c isNil				ifFalse:					[avg := avg + c.					nbObs := nbObs + 1]].	nbObs = 0		ifTrue: [^nil]		ifFalse: [^avg / nbObs]</body><body package="VirusNoysters" selector="averageClassesExcludingZeros:">averageClassesExcludingZeros: aCollecOfCollec	"calcule la moyenne terme a terme d'une collection de collections de meme longueur. On ne prend pas en compte les 0 qu'on considere comme des non observations sauf si tous les nombres sont nuls ce qu'on considere alors comme une mortalite.Meme methode dans InfoSystem!!!!!!"		| size avg i temp value |	size := aCollecOfCollec first size.	avg := OrderedCollection new.	i := 1.	size		timesRepeat:			[temp := OrderedCollection new.			aCollecOfCollec do: [:c | (c at: i) = 0 ifFalse: [temp add: (c at: i)]]. "On ne tient compte que des non nuls."			temp isEmpty				ifTrue: [avg add: 0] "sauf s'ils sont tous nuls (dans ce cas, on n'a rien ajoute dans temp"				ifFalse:					[value := self average: temp. "s'ils ne sont pas tous nuls, on en fait la moyenne"					avg add: value].			i := i + 1].	^avg</body><body package="VirusNoysters" selector="averageMortalities:howMuch:">averageMortalities: mortalities howMuch: aCollecOfNumberOfOysters	"On repartit les elements dans les differentes classes puis on fait un profil en faisant les moyennes des differentes classes. Renvoie nul si pas de valeur"		| zeProfile i j moyenneThree moyenneFive moyenneSeven moyenneNine moyenneMore deadThree deadFive deadSeven deadNine deadMore totalThree totalFive totalSeven totalNine totalMore |	deadThree := OrderedCollection new.	deadFive := OrderedCollection new.	deadSeven := OrderedCollection new.	deadNine := OrderedCollection new.	deadMore := OrderedCollection new.	totalThree := OrderedCollection new.	totalFive := OrderedCollection new.	totalSeven := OrderedCollection new.	totalNine := OrderedCollection new.	totalMore := OrderedCollection new.	zeProfile := OrderedCollection new.	i := 1.	aCollecOfNumberOfOysters		do:			[:n | "n est donc un element d'une collection d'huitre, c'est un nombre d'huitres total"			n isNil				ifFalse:					[j := self whichClass: n. "whichClass regarde si le nombre d'huitres correspond a la categorie"					(j = 1 and:[n&gt;0])						ifTrue:							[deadThree add: (mortalities at: i).							totalThree add: n].					j = 2						ifTrue:							[deadFive add: (mortalities at: i).							totalFive add: n].					j = 3						ifTrue:							[deadSeven add: (mortalities at: i).							totalSeven add: n].					j = 4						ifTrue:							[deadNine add: (mortalities at: i).							totalNine add: n].					j = 5						ifTrue:							[deadMore add: (mortalities at: i).							totalMore add: n]].			i := i + 1].	"On calcule les moyennes pures"	moyenneThree := self averageNumerator:deadThree denominator: totalThree.	moyenneFive := self averageNumerator:deadFive denominator: totalFive.	moyenneSeven := self averageNumerator:deadSeven denominator: totalSeven.	moyenneNine := self averageNumerator:deadNine denominator: totalNine.	moyenneMore := self averageNumerator:deadMore denominator: totalMore.	"self halt."	"On les transforme en fonctions croissantes"	moyenneFive := self max: moyenneThree and: moyenneFive.	moyenneSeven := self max: moyenneFive and: moyenneSeven.	moyenneNine := self max: moyenneSeven and: moyenneNine.	moyenneMore := self max: moyenneNine and: moyenneMore.	zeProfile add: moyenneThree.	zeProfile add: moyenneFive.	zeProfile add: moyenneSeven.	zeProfile add: moyenneNine.	zeProfile add: moyenneMore.	^zeProfile</body><body package="VirusNoysters" selector="averageNumerator:denominator:">averageNumerator: num denominator: den	"Fait la somme des elements de num et de den puis divise l'un par l'autre. On multiplie par 100 pour avoir un pourcentage"		| numerator denominator |	num isEmpty		ifTrue: [^nil]		ifFalse:			[numerator := 0.			denominator := 0.			num size = den size ifFalse: [self halt].			num do: [:n | n isNil ifFalse: [numerator := numerator + n]].			den do: [:d | d isNil ifFalse: [denominator := denominator + d]].			^100 * numerator / denominator]</body><body package="VirusNoysters" selector="beliefMortalityOysterType:Qty:">beliefMortalityOysterType: anOysterClass Qty: qty	"we find the right beliefs for the proper class and then the associated death rate."		| bel class |	anOysterClass = Triploid ifTrue: [bel := self beliefs at: #beliefTriplo].	anOysterClass = Diploid ifTrue: [bel := self beliefs at: #beliefDiplo].	anOysterClass = Natural ifTrue: [bel := self beliefs at: #beliefNat].	class := self whichClass: (qty * self tableCapacity).	^bel at: class</body><body package="VirusNoysters" selector="compare:with:">compare: aColl with: anotherColl	"aColl may contain nil values while anotherColl not. We replace nil values in aColl by those in anotherColl"		| newColl |	aColl size = anotherColl size ifFalse: [^self halt].	newColl := OrderedCollection new.	1		to: aColl size		do:			[:i | 			(aColl at: i) = nil				ifTrue: [newColl add: (anotherColl at: i)]				ifFalse: [newColl add: (aColl at: i)]].	^newColl</body><body package="VirusNoysters" selector="max:and:">max: a and: b		a isNil ifTrue:[^b].	b isNil ifTrue:[^a].	a &gt; b ifTrue: [^a].	^b</body><body package="VirusNoysters" selector="weightedAverageCollecOfCollec:">weightedAverageCollecOfCollec: aCollectionofCollections	"Averages elements of the collection using weights for sources.	aCollectionofCollections = (persoObs, pubObs, isObs) for a particular kind of oysters (T,D,N). persoObs = OrderedCollection(-,-,-,-,-) where elements  containt the death rate for each level."	| weightedAverage farmer friends is val |	weightedAverage := OrderedCollection new.	farmer := aCollectionofCollections at: 1.	friends := aCollectionofCollections at: 2.	is := aCollectionofCollections at: 3.	1 to: farmer size do:	[:i | val := 0.		val := (self sharePerso * (farmer at: i)) + (self shareFriends * (friends at: i)) + (self shareIS* (is at: i)).		weightedAverage add: val asInteger.].	^weightedAverage</body><body package="VirusNoysters" selector="weightedAverageCollecOfCollecNoIS:">weightedAverageCollecOfCollecNoIS: aCollectionofCollections	"Averages elements of the collection using weights for sources.	aCollectionofCollections = (persoObs, pubObs, isObs) for a particular kind of oysters (T,D,N). persoObs = OrderedCollection(-,-,-,-,-) where elements  containt the death rate for each level."	| weightedAverage farmer friends val |	self sharePerso + self shareFriends = 1 ifFalse:[self halt].	weightedAverage := OrderedCollection new.	farmer := aCollectionofCollections at: 1.	friends := aCollectionofCollections at: 2.	1 to: farmer size do:	[:i | val := 0.		val := (self sharePerso * (farmer at: i)) + (self shareFriends * (friends at: i)).		weightedAverage add: val asInteger.].	^weightedAverage</body><body package="VirusNoysters" selector="weightedAverageCollecOfCollecNoNetwork:">weightedAverageCollecOfCollecNoNetwork: aCollectionofCollections	"Averages elements of the collection using weights for sources.	aCollectionofCollections = (persoObs, pubObs, isObs) for a particular kind of oysters (T,D,N). persoObs = OrderedCollection(-,-,-,-,-) where elements  containt the death rate for each level."		| weightedAverage farmer is val |	self sharePerso + self shareIS = 1 ifFalse: [self halt].	weightedAverage := OrderedCollection new.	farmer := aCollectionofCollections at: 1.	is := aCollectionofCollections at: 2.	1		to: farmer size		do:			[:i | 			val := 0.			val := self sharePerso * (farmer at: i) + (self shareIS * (is at: i)).			weightedAverage add: val asInteger].	^weightedAverage</body><body package="VirusNoysters" selector="whichClass:">whichClass: aNumber		| i |	aNumber isNil ifTrue: [^nil].	i := 1.	[i &lt; (self limits size - 1) and: [(self limits at: i) &lt; aNumber]]		whileTrue: [i := i + 1].	^i</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation class</class-id> <category>- default value</category><body package="VirusNoysters" selector="beliefs_default">beliefs_default 	"Return the default value of attribute #beliefs : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="farmerObs_default">farmerObs_default 	"Return the default value of attribute #farmerObs : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="farmer_default">farmer_default 	"Return the default value of attribute #farmer : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="friendsExpTriplo_default">friendsExpTriplo_default 	"Return the default value of attribute #friendsExpTriplo : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="friendsObs_default">friendsObs_default 	"Return the default value of attribute #friendsObs : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="friendsRaw_default">friendsRaw_default 	"Return the default value of attribute #friendsRaw : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="initialBelief_default">initialBelief_default 	"Return the default value of attribute #initialBelief : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="limits_default">limits_default 	"Return the default value of attribute #limits : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="nbClasses_default">nbClasses_default 	"Return the default value of attribute #nbClasses : 5.		!! This method was automatically generated by Cormas !!"	^5</body><body package="VirusNoysters" selector="observationMaker_default">observationMaker_default 	"Return the default value of attribute #observationMaker : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="persoRaw_default">persoRaw_default 	"Return the default value of attribute #persoRaw : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="perso_default">perso_default 	"Return the default value of attribute #perso : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="pubObs_default">pubObs_default 	"Return the default value of attribute #pubObs : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="shareFriends_default">shareFriends_default 	"Return the default value of attribute #shareFriends : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="shareIS_default">shareIS_default 	"Return the default value of attribute #shareIS : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="sharePerso_default">sharePerso_default 	"Return the default value of attribute #sharePerso : 1.		!! This method was automatically generated by Cormas !!"	^1</body><body package="VirusNoysters" selector="tableCapacity_default">tableCapacity_default 	"Return the default value of attribute #tableCapacity : 20.		!! This method was automatically generated by Cormas !!"	^20</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Observation class</class-id> <category>accessing</category><body package="VirusNoysters" selector="nbClasses">nbClasses	"Getter accessor with default value = 5.	!! This method was automatically generated by Cormas !!"	^nbClasses ifNil:[nbClasses := 5]</body><body package="VirusNoysters" selector="nbClasses:">nbClasses: anObject	"Setter accessor of attribute nbClasses. 	!! This method was automatically generated by Cormas !!  "	nbClasses := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Diploid</class-id> <category>accessing</category><body package="VirusNoysters" selector="isSellable">isSellable	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^isSellable ifNil:[isSellable := false]</body><body package="VirusNoysters" selector="killedByVirus">killedByVirus	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^killedByVirus ifNil:[killedByVirus := false]</body><body package="VirusNoysters" selector="weight">weight	"Getter accessor with default value = 6.	!! This method was automatically generated by Cormas !!"	^weight ifNil:[weight := 6]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Diploid class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Diploid class</class-id> <category>accessing</category><body package="VirusNoysters" selector="maxGrowth">maxGrowth	"Getter accessor with default value = 3.	!! This method was automatically generated by Cormas !!"	^maxGrowth ifNil:[maxGrowth := 3]</body><body package="VirusNoysters" selector="sizeMaxOysterBatch">sizeMaxOysterBatch	"Getter accessor with default value = 10000.	!! This method was automatically generated by Cormas !!"	^sizeMax ifNil:[sizeMax := 10000]</body><body package="VirusNoysters" selector="weightSellable">weightSellable	"Getter accessor with default value = 36.	!! This method was automatically generated by Cormas !!"	^weightSellable ifNil:[weightSellable := 36]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Diploid class</class-id> <category>- default value</category><body package="VirusNoysters" selector="ageSellable_default">ageSellable_default 	"Return the default value of attribute #ageSellable : 24.		!! This method was automatically generated by Cormas !!"	^24</body><body package="VirusNoysters" selector="age_default">age_default 	"Return the default value of attribute #age : 6.		!! This method was automatically generated by Cormas !!"	^6</body><body package="VirusNoysters" selector="sizeMax_default">sizeMax_default 	"Return the default value of attribute #sizeMax : 10000.		!! This method was automatically generated by Cormas !!"	^10000</body><body package="VirusNoysters" selector="weightSellable_default">weightSellable_default 	"Return the default value of attribute #weightSellable : 36.		!! This method was automatically generated by Cormas !!"	^36</body><body package="VirusNoysters" selector="weight_default">weight_default 	"Return the default value of attribute #weight : 6.		!! This method was automatically generated by Cormas !!"	^6</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Mix</class-id> <category>initMix</category><body package="VirusNoysters" selector="initMix">initMix	self mT: (Dictionary withKeysAndValues:#(#T 1 #D 0 #N 0)).	self mD: (Dictionary withKeysAndValues:#(#T 0 #D 1 #N 0)). 	self mN: (Dictionary withKeysAndValues:#(#T 0 #D 0 #N 1)).	self mTD: (Dictionary withKeysAndValues:#(#T 0.5 #D 0.5 #N 0)).	self mTN: (Dictionary withKeysAndValues:#(#T 0.5 #D 0 #N 0.5)).	self mDN: (Dictionary withKeysAndValues:#(#T 0 #D 0.5 #N 0.5)).	self mTDN: (Dictionary withKeysAndValues:#(#T 0.33 #D 0.33 #N 0.34)).	self setMixes: OrderedCollection new.	self setMixes add: self mT.	self setMixes add: self mD.	self setMixes add: self mN.	self setMixes add: self mTD.	self setMixes add: self mTN.	self setMixes add: self mDN.	self setMixes add: self mTDN.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Mix</class-id> <category>accessing</category><body package="VirusNoysters" selector="mD">mD	"Getter accessor without default value "	^mD</body><body package="VirusNoysters" selector="mD:">mD: anObject	"Setter accessor of attribute mD. 	!! This method was automatically generated by Cormas !!  "	mD := anObject</body><body package="VirusNoysters" selector="mDN">mDN	"Getter accessor without default value "	^mDN</body><body package="VirusNoysters" selector="mDN:">mDN: anObject	"Setter accessor of attribute mDN. 	!! This method was automatically generated by Cormas !!  "	mDN := anObject</body><body package="VirusNoysters" selector="mN">mN	"Getter accessor without default value "	^mN</body><body package="VirusNoysters" selector="mN:">mN: anObject	"Setter accessor of attribute mN. 	!! This method was automatically generated by Cormas !!  "	mN := anObject</body><body package="VirusNoysters" selector="mT">mT	"Getter accessor without default value "	^mT</body><body package="VirusNoysters" selector="mT:">mT: anObject	"Setter accessor of attribute mT. 	!! This method was automatically generated by Cormas !!  "	mT := anObject</body><body package="VirusNoysters" selector="mTD">mTD	"Getter accessor without default value "	^mTD</body><body package="VirusNoysters" selector="mTD:">mTD: anObject	"Setter accessor of attribute mTD. 	!! This method was automatically generated by Cormas !!  "	mTD := anObject</body><body package="VirusNoysters" selector="mTDN">mTDN	"Getter accessor without default value "	^mTDN</body><body package="VirusNoysters" selector="mTDN:">mTDN: anObject	"Setter accessor of attribute mTDN. 	!! This method was automatically generated by Cormas !!  "	mTDN := anObject</body><body package="VirusNoysters" selector="mTN">mTN	"Getter accessor without default value "	^mTN</body><body package="VirusNoysters" selector="mTN:">mTN: anObject	"Setter accessor of attribute mTN. 	!! This method was automatically generated by Cormas !!  "	mTN := anObject</body><body package="VirusNoysters" selector="setMixes">setMixes	"Getter accessor without default value "	^setMixes</body><body package="VirusNoysters" selector="setMixes:">setMixes: anObject	"Setter accessor of attribute setMixes. 	!! This method was automatically generated by Cormas !!  "	setMixes := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Mix class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Mix class</class-id> <category>- default value</category><body package="VirusNoysters" selector="mDN_default">mDN_default 	"Return the default value of attribute #mDN : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="mD_default">mD_default 	"Return the default value of attribute #mD : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="mN_default">mN_default 	"Return the default value of attribute #mN : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="mTDN_default">mTDN_default 	"Return the default value of attribute #mTDN : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="mTD_default">mTD_default 	"Return the default value of attribute #mTD : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="mTN_default">mTN_default 	"Return the default value of attribute #mTN : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="mT_default">mT_default 	"Return the default value of attribute #mT : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="setMixes_default">setMixes_default 	"Return the default value of attribute #setMixes : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Market class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Market class</class-id> <category>accessing</category><body package="VirusNoysters" selector="priceDiplo">priceDiplo	"Getter accessor with default value = 10.	!! This method was automatically generated by Cormas !!"	^priceDiplo ifNil:[priceDiplo := 10]</body><body package="VirusNoysters" selector="priceDiplo:">priceDiplo: anObject	"Setter accessor of attribute priceDiplo. 	!! This method was automatically generated by Cormas !!  "	priceDiplo := anObject</body><body package="VirusNoysters" selector="priceGrown">priceGrown	"Getter accessor with default value = 80.	!! This method was automatically generated by Cormas !!"	^priceGrown ifNil:[priceGrown := 80]</body><body package="VirusNoysters" selector="priceGrown:">priceGrown: anObject	"Setter accessor of attribute priceGrown. 	!! This method was automatically generated by Cormas !!  "	priceGrown := anObject</body><body package="VirusNoysters" selector="priceNatural">priceNatural	"Getter accessor with default value = 15.	!! This method was automatically generated by Cormas !!"	^priceNatural ifNil:[priceNatural := 15]</body><body package="VirusNoysters" selector="priceNatural:">priceNatural: anObject	"Setter accessor of attribute priceNatural. 	!! This method was automatically generated by Cormas !!  "	priceNatural := anObject</body><body package="VirusNoysters" selector="priceTriplo">priceTriplo	"Getter accessor with default value = 10.	!! This method was automatically generated by Cormas !!"	^priceTriplo ifNil:[priceTriplo := 10]</body><body package="VirusNoysters" selector="priceTriplo:">priceTriplo: anObject	"Setter accessor of attribute priceTriplo. 	!! This method was automatically generated by Cormas !!  "	priceTriplo := anObject</body><body package="VirusNoysters" selector="sizeBatch">sizeBatch	"Getter accessor with default value = 1000.	!! This method was automatically generated by Cormas !!"	^sizeBatch ifNil:[sizeBatch := 1000]</body><body package="VirusNoysters" selector="sizeBatch:">sizeBatch: anObject	"Setter accessor of attribute sizeBatch. 	!! This method was automatically generated by Cormas !!  "	sizeBatch := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Market class</class-id> <category>- default value</category><body package="VirusNoysters" selector="priceDiplo_default">priceDiplo_default 	"Return the default value of attribute #priceDiplo : 10.		!! This method was automatically generated by Cormas !!"	^10</body><body package="VirusNoysters" selector="priceGrown_default">priceGrown_default 	"Return the default value of attribute #priceGrown : 80.		!! This method was automatically generated by Cormas !!"	^80</body><body package="VirusNoysters" selector="priceNatural_default">priceNatural_default 	"Return the default value of attribute #priceNatural : 15.		!! This method was automatically generated by Cormas !!"	^15</body><body package="VirusNoysters" selector="priceTriplo_default">priceTriplo_default 	"Return the default value of attribute #priceTriplo : 10.		!! This method was automatically generated by Cormas !!"	^10</body><body package="VirusNoysters" selector="sizeBatch_default">sizeBatch_default 	"Return the default value of attribute #sizeBatch : 1000.		!! This method was automatically generated by Cormas !!"	^1000</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Natural</class-id> <category>accessing</category><body package="VirusNoysters" selector="isSellable">isSellable	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^isSellable ifNil:[isSellable := false]</body><body package="VirusNoysters" selector="killedByVirus">killedByVirus	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^killedByVirus ifNil:[killedByVirus := false]</body><body package="VirusNoysters" selector="weight">weight	"Getter accessor with default value = 3.	!! This method was automatically generated by Cormas !!"	^weight ifNil:[weight := 3]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Natural class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Natural class</class-id> <category>accessing</category><body package="VirusNoysters" selector="maxGrowth">maxGrowth	"Getter accessor with default value = 3.	!! This method was automatically generated by Cormas !!"	^maxGrowth ifNil:[maxGrowth := 3]</body><body package="VirusNoysters" selector="sizeMaxOysterBatch">sizeMaxOysterBatch	"Getter accessor with default value = 10000.	!! This method was automatically generated by Cormas !!"	^sizeMax ifNil:[sizeMax := 10000]</body><body package="VirusNoysters" selector="weightSellable">weightSellable	"Getter accessor with default value = 36.	!! This method was automatically generated by Cormas !!"	^weightSellable ifNil:[weightSellable := 36]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Natural class</class-id> <category>- default value</category><body package="VirusNoysters" selector="ageSellable_default">ageSellable_default 	"Return the default value of attribute #ageSellable : 24.		!! This method was automatically generated by Cormas !!"	^24</body><body package="VirusNoysters" selector="age_default">age_default 	"Return the default value of attribute #age : 3.		!! This method was automatically generated by Cormas !!"	^3</body><body package="VirusNoysters" selector="sizeMax_default">sizeMax_default 	"Return the default value of attribute #sizeMax : 10000.		!! This method was automatically generated by Cormas !!"	^10000</body><body package="VirusNoysters" selector="weightSellable_default">weightSellable_default 	"Return the default value of attribute #weightSellable : 36.		!! This method was automatically generated by Cormas !!"	^36</body><body package="VirusNoysters" selector="weight_default">weight_default 	"Return the default value of attribute #weight : 3.		!! This method was automatically generated by Cormas !!"	^3</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm</class-id> <category>control</category><body package="VirusNoysters" selector="stepFarm">stepFarm	"self collectInfo."	self groupReadyOysters.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm</class-id> <category>accessing</category><body package="VirusNoysters" selector="aBigBagOfDeadOysters">aBigBagOfDeadOysters	"Getter accessor without default value "	^aBigBagOfDeadOysters</body><body package="VirusNoysters" selector="aBigBagOfDeadOysters:">aBigBagOfDeadOysters: anObject	"Setter accessor of attribute aBigBagOfDeadOysters. 	!! This method was automatically generated by Cormas !!  "	aBigBagOfDeadOysters := anObject</body><body package="VirusNoysters" selector="aBigBagOfReadyOysters">aBigBagOfReadyOysters	"Getter accessor without default value "	^aBigBagOfReadyOysters</body><body package="VirusNoysters" selector="aBigBagOfReadyOysters:">aBigBagOfReadyOysters: anObject	"Setter accessor of attribute readyOysters. 	!! This method was automatically generated by Cormas !!  "	aBigBagOfReadyOysters := anObject</body><body package="VirusNoysters" selector="owner">owner	"Getter accessor without default value "	^owner</body><body package="VirusNoysters" selector="owner:">owner: anObject	"Setter accessor of attribute owner. 	!! This method was automatically generated by Cormas !!  "	owner := anObject</body><body package="VirusNoysters" selector="tables">tables	"Getter accessor without default value "	^tables</body><body package="VirusNoysters" selector="tables:">tables: anObject	"Setter accessor of attribute tables. 	!! This method was automatically generated by Cormas !!  "	tables := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm</class-id> <category>initialize-release</category><body package="VirusNoysters" selector="initFarm">initFarm		self tables: OrderedCollection new.	self aBigBagOfReadyOysters: OrderedCollection new.	self aBigBagOfDeadOysters: OrderedCollection new.	"self nbDiploFarm: OrderedCollection new.	self nbTriploFarm: OrderedCollection new.	self nbNatFarm: OrderedCollection new.	self diploDeadFarm: OrderedCollection new.	self triploDeadFarm: OrderedCollection new.	self natDeadFarm: OrderedCollection new.	self nbOystersFarm: OrderedCollection new."</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm</class-id> <category>tables</category><body package="VirusNoysters" selector="addTable:">addTable: aTable		self tables add: aTable</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm</class-id> <category>deprecated</category><body package="VirusNoysters" selector="collectInfo">collectInfo		| nbDiplo nbTriplo deadDiplo deadTriplo nbNat deadNat |	nbDiplo := 0.	nbTriplo := 0.	nbNat := 0.	deadDiplo := 0.	deadTriplo := 0.	deadNat := 0.	self tables		do:			[:t | 			t nbDiplo isNil ifFalse: [nbDiplo := nbDiplo + t nbDiplo].			t nbTriplo isNil ifFalse: [nbTriplo := nbTriplo + t nbTriplo].			t nbNat isNil ifFalse: [nbNat := nbNat + t nbNat].			t ratioDiploDead isNil				ifFalse: [deadDiplo := deadDiplo + t ratioDiploDead].			t ratioTriploDead isNil				ifFalse: [deadTriplo := deadTriplo + t ratioTriploDead].			t ratioNatDead isNil ifFalse: [deadNat := deadNat + t ratioNatDead]].	self nbDiploFarm add: nbDiplo.	self nbTriploFarm add: nbTriplo.	self nbNatFarm add: nbNat.	self diploDeadFarm add: deadDiplo.	self triploDeadFarm add: deadTriplo.	self natDeadFarm add: deadNat.	self nbOystersFarm add: nbTriplo + nbDiplo + nbNat</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm</class-id> <category>oysters</category><body package="VirusNoysters" selector="groupReadyOysters">groupReadyOysters	"Groupe les huitres mortes dans un sac et met les autres dans le mas pour les vendre."		self tables		do:			[:t | 			t zeOysters				do:					[:o | 					o isDead						ifTrue: [self aBigBagOfDeadOysters add: o]						ifFalse: [o isSellable ifTrue: [self aBigBagOfReadyOysters add: o]]]].</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farm class</class-id> <category>- default value</category><body package="VirusNoysters" selector="aBigBagOfDeadOysters_default">aBigBagOfDeadOysters_default 	"Return the default value of attribute #aBigBagOfDeadOysters : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="aBigBagOfReadyOysters_default">aBigBagOfReadyOysters_default 	"Return the default value of attribute #aBigBagOfReadyOysters : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="owner_default">owner_default 	"Return the default value of attribute #owner : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="readyOysters_default">readyOysters_default 	"Return the default value of attribute #readyOysters : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="tables_default">tables_default 	"Return the default value of attribute #tables : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>accessing</category><body package="VirusNoysters" selector="beliefs">beliefs	"Getter accessor without default value "	^beliefs</body><body package="VirusNoysters" selector="beliefs:">beliefs: anObject	"Setter accessor of attribute beliefs. 	!! This method was automatically generated by Cormas !!  "	beliefs := anObject</body><body package="VirusNoysters" selector="myDecision">myDecision	"Getter accessor without default value "	^myDecision</body><body package="VirusNoysters" selector="myDecision:">myDecision: anObject	"Setter accessor of attribute decisionModel. 	!! This method was automatically generated by Cormas !!  "	myDecision := anObject</body><body package="VirusNoysters" selector="myFarm">myFarm	"Getter accessor without default value "	^myFarm</body><body package="VirusNoysters" selector="myFarm:">myFarm: anObject	"Setter accessor of attribute myFarm. 	!! This method was automatically generated by Cormas !!  "	myFarm := anObject</body><body package="VirusNoysters" selector="myObservation">myObservation	"Getter accessor without default value "	^myObservation</body><body package="VirusNoysters" selector="myObservation:">myObservation: anObject	"Setter accessor of attribute myObservations. 	!! This method was automatically generated by Cormas !!  "	myObservation := anObject</body><body package="VirusNoysters" selector="type">type	"Getter accessor without default value "	^type</body><body package="VirusNoysters" selector="type:">type: anObject	"Setter accessor of attribute type. 	!! This method was automatically generated by Cormas !!  "	type := anObject</body><body package="VirusNoysters" selector="wallet">wallet	"Getter accessor with default value = 10000.	!! This method was automatically generated by Cormas !!"	^wallet ifNil:[wallet := 10000]</body><body package="VirusNoysters" selector="wallet:">wallet: anObject	"Setter accessor of attribute wallet. 	!! This method was automatically generated by Cormas !!  "	wallet := anObject</body><body package="VirusNoysters" selector="zeIS">zeIS	"Getter accessor without default value "	^zeIS</body><body package="VirusNoysters" selector="zeIS:">zeIS: anObject	"Setter accessor of attribute zeIS. 	!! This method was automatically generated by Cormas !!  "	zeIS := anObject</body><body package="VirusNoysters" selector="zeMarket">zeMarket	"Getter accessor without default value "	^zeMarket</body><body package="VirusNoysters" selector="zeMarket:">zeMarket: anObject	"Setter accessor of attribute myMarket. 	!! This method was automatically generated by Cormas !!  "	zeMarket := anObject</body><body package="VirusNoysters" selector="zeMix">zeMix	"Getter accessor without default value "	^zeMix</body><body package="VirusNoysters" selector="zeMix:">zeMix: anObject	"Setter accessor of attribute zeMix. 	!! This method was automatically generated by Cormas !!  "	zeMix := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>init</category><body package="VirusNoysters" selector="initFarmer">initFarmer		| nbTables |	"On attribue des tables  l'ostriculteur, tables qu'on cree, on lui cree une case memoire pour retenir ce que vont dire ses amis."	self myFarm: (self newEntity: Farm).	self myFarm owner: self.	self myFarm initFarm.	nbTables := Cormas		randomIntegerFrom: 1		to: self class nbTablesMax.	self installNewTables: nbTables.	"self myFarm collectInfo"</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>probes</category><body package="VirusNoysters" selector="networkSize">networkSize	"return the data (a number) to be recorded"		^self acquaintances size</body><body package="VirusNoysters" selector="pWallet">pWallet	^self wallet</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>info sharing</category><body package="VirusNoysters" selector="readInfoFromFriends:">readInfoFromFriends: t	self myObservation pubExpTriplo: self myPub triploPub</body><body package="VirusNoysters" selector="readInfoFromIS:">readInfoFromIS: t	self myObservation infoSharingTriplo: self zeIS triploIS</body><body package="VirusNoysters" selector="sendInfoToFriends:">sendInfoToFriends: t	"for now, only about triploid mortality"		self acquaintances		do: [:a | a myPub triploObsPub add: self myObservation myExpTriplo]</body><body package="VirusNoysters" selector="sendInfoToInfoSharingSystem:">sendInfoToInfoSharingSystem: t	self zeIS triploObsIS add: self myObservation myExpTriplo</body><body package="VirusNoysters" selector="sendInfoTriploMortality">sendInfoTriploMortality		self acquaintances		do:			[:f | 			self				sendMessageAsynchronously:					(InfoExchange						to: f						topic: #mortalityTriplo						content: self beliefTriploMortality)]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>oyster</category><body package="VirusNoysters" selector="buyOyster:">buyOyster: t	"On choisit un type d'huitres au hasard selon le mix et on deduit le prix du portefeuille du fermier. Les huitres naturelles ne peuvent etre achetees qu'en ete. Pour prendre en compte cela, je cree l'huitre avec un age negatif de telle sorte qu'en ete son age soit egal a 3, avec la formule suivante :  age &lt;- -6 + 3x t mod 4. Le virus ne peut pas attaquer d'huitres plus jeunes que 3 mois."		| r o |	r := Cormas random.	r &lt; self myDecision shareTriplo		ifTrue:			[o := self				buyOysterClass: Triploid				qty: self myDecision idealQtyTriplo				price: self zeMarket class priceTriplo]		ifFalse:			[r &lt; (self myDecision shareTriplo + self myDecision shareDiplo)				ifTrue:					[o := self						buyOysterClass: Diploid						qty: self myDecision idealQtyDiplo						price: self zeMarket class priceDiplo]				ifFalse:					[o := self						buyOysterClass: Natural						qty: self myDecision idealQtyNat						price: self zeMarket class priceNatural.					o weight: (t \\ 4) * 3 - 6]].	^o</body><body package="VirusNoysters" selector="buyOysterClass:qty:price:">buyOysterClass: anOysterClass qty: q price: p	"Renvoit une huitre de la classe choisie avec une quantite majoree par la taille maximale d'un lot. Deduit le prix du portefeuille du ferier."		| o price |	o := self newEntity: anOysterClass.	o		size:			(q &lt; o class sizeMaxOysterBatch				ifTrue: [q]				ifFalse: [o class sizeMaxOysterBatch]).	o weight = nil ifTrue: [self halt].	price := o size * p / self zeMarket class sizeBatch.	self wallet: self wallet - price. 	^o</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>table install</category><body package="VirusNoysters" selector="installNewTables:">installNewTables: aNumber		| newTable |	aNumber		timesRepeat:			[newTable := self newEntity: Table.			newTable isMovedTo: self nearestEmptyLocations first.			newTable owner: self.			newTable initTable.			newTable farm: self myFarm.			self myFarm addTable: newTable.			newTable zeOysters do: [:o | o patch: newTable patch]]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>control</category><body package="VirusNoysters" selector="equipTables:">equipTables: t	"Il equipe autant de tables qu'il peut, tant que son revenu n'est pas negatif. Les huitres naturelles ne peuvent etre achetees qu'en ete. On leur reserve une place en les installant mais en leur attribuant un age negatif, age auquel elles ne peuvent pas etre touchees par le virus."		| o |	self myFarm tables		do:			[:tab | 			[tab class carryingCapacity &gt; tab nbBatches and: [self wallet &gt; 0]]				whileTrue:					[o := self buyOyster: t.					o isNil ifFalse: [tab equip: o]. "self halt"]]</body><body package="VirusNoysters" selector="sellOysters">sellOysters	"On vend toutes les huitres vendables. Pas de probleme d'ecoulement."		| value |	self myFarm aBigBagOfReadyOysters		do:			[:o | 			value := self zeMarket class priceGrown * o size				/ self zeMarket class sizeBatch.			self wallet: self wallet + value.			o dead: true].	self myFarm aBigBagOfReadyOysters removeAll</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer</class-id> <category>deprecated</category><body package="VirusNoysters" selector="buyOyster">buyOyster	"On choisit un type d'huitres au hasard selon le mix et on deduit le prix du portefeuille du fermier."		| r o |	r := Cormas random.	r &lt; self myDecision shareTriplo		ifTrue:			[o := self				buyOysterClass: Triploid				qty: self myDecision idealQtyTriplo				price: self zeMarket class priceTriplo]		ifFalse:			[r &lt; (self myDecision shareTriplo + self myDecision shareDiplo)				ifTrue:					[o := self						buyOysterClass: Diploid						qty: self myDecision idealQtyDiplo						price: self zeMarket class priceDiplo]				ifFalse:					[o := self						buyOysterClass: Natural						qty: self myDecision idealQtyNat						price: self zeMarket class priceNatural]].	^o</body><body package="VirusNoysters" selector="buyOysters">buyOysters	"Il investit tant qu'il a de l'argent. On trouve une table pas pleine. Pour le moment, il prend autant d'huitres triploides qu'il peut. Il n'y a pas d'emprunt"		| newOyst |	self myTables		do:			[:tab | 			[tab isFull not and: [self wallet &gt; 0]]				whileFalse:					[newOyst := self newEntity: Triploid.					newOyst initOysterSize: newOyst class sizeMaxOysterBatch.					newOyst table: tab.					tab zeOysters add: newOyst.					tab updateFull.					self						wallet:							self wallet - (newOyst class sizeMaxOysterBatch * self zeMarket class priceDiplo / 12)]]</body><body package="VirusNoysters" selector="countEverything:">countEverything: t	self brain stepMemory: t.</body><body package="VirusNoysters" selector="makeDecision:">makeDecision: t	self myDecision stepDecision: t.</body><body package="VirusNoysters" selector="sell:">sell: oyster		self		wallet: self wallet + (oyster size * self zeMarket class priceGrown / 12).	oyster dead: true</body><body package="VirusNoysters" selector="stepFarmer:">stepFarmer: t		self sellOysters.	self buyOysters.	self wallet &lt; 0 ifTrue:[self halt.]</body><body package="VirusNoysters" selector="stepFriends:">stepFriends: t	</body><body package="VirusNoysters" selector="stepOnTheBoat:">stepOnTheBoat: t	self sellOysters.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer class</class-id> <category>- default value</category><body package="VirusNoysters" selector="beliefs_default">beliefs_default 	"Return the default value of attribute #beliefs : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="decisionModel_default">decisionModel_default 	"Return the default value of attribute #decisionModel : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="friendStuff_default">friendStuff_default 	"Return the default value of attribute #friendStuff : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="myDecision_default">myDecision_default 	"Return the default value of attribute #myDecision : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="myFarm_default">myFarm_default 	"Return the default value of attribute #myFarm : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="myFriends_default">myFriends_default 	"Return the default value of attribute #myFriends : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="myMarket_default">myMarket_default 	"Return the default value of attribute #myMarket : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="myObservations_default">myObservations_default 	"Return the default value of attribute #myObservations : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="myObservation_default">myObservation_default 	"Return the default value of attribute #myObservation : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="nbTablesMax_default">nbTablesMax_default 	"Return the default value of attribute #nbTablesMax : 10.		!! This method was automatically generated by Cormas !!"	^10</body><body package="VirusNoysters" selector="type_default">type_default 	"Return the default value of attribute #type : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="wallet_default">wallet_default 	"Return the default value of attribute #wallet : 10000.		!! This method was automatically generated by Cormas !!"	^10000</body><body package="VirusNoysters" selector="zeIS_default">zeIS_default 	"Return the default value of attribute #zeIS : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="zeMarket_default">zeMarket_default 	"Return the default value of attribute #zeMarket : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="zeMix_default">zeMix_default 	"Return the default value of attribute #zeMix : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Farmer class</class-id> <category>accessing</category><body package="VirusNoysters" selector="nbTablesMax">nbTablesMax	"Getter accessor with default value = 10.	!! This method was automatically generated by Cormas !!"	^nbTablesMax ifNil:[nbTablesMax := 10]</body><body package="VirusNoysters" selector="nbTablesMax:">nbTablesMax: anObject	"Setter accessor of attribute nbTablesMax. 	!! This method was automatically generated by Cormas !!  "	nbTablesMax := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>control</category><body package="VirusNoysters" selector="getInfo">getInfo		self updateOysterCountAndDeaths.	self updateProfil.	self updateBatches.		self updateFull</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>accessing</category><body package="VirusNoysters" selector="aBigBagOfReadyOysters">aBigBagOfReadyOysters	"Getter accessor without default value "	^readyOysters</body><body package="VirusNoysters" selector="aBigBagOfReadyOysters:">aBigBagOfReadyOysters: anObject	"Setter accessor of attribute readyOysters. 	!! This method was automatically generated by Cormas !!  "	readyOysters := anObject</body><body package="VirusNoysters" selector="diploDead">diploDead	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^diploDead ifNil:[diploDead := 0]</body><body package="VirusNoysters" selector="diploDead:">diploDead: anObject	"Setter accessor of attribute diploDeadTable. 	!! This method was automatically generated by Cormas !!  "	diploDead := anObject</body><body package="VirusNoysters" selector="farm">farm	"Getter accessor without default value "	^farm</body><body package="VirusNoysters" selector="farm:">farm: anObject	"Setter accessor of attribute farm. 	!! This method was automatically generated by Cormas !!  "	farm := anObject</body><body package="VirusNoysters" selector="isFull">isFull	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^isFull ifNil:[isFull := false]</body><body package="VirusNoysters" selector="isFull:">isFull: anObject	"Setter accessor of attribute isFull. 	!! This method was automatically generated by Cormas !!  "	isFull := anObject</body><body package="VirusNoysters" selector="natDead">natDead	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^natDead ifNil:[natDead := 0]</body><body package="VirusNoysters" selector="natDead:">natDead: anObject	"Setter accessor of attribute natDeadTable. 	!! This method was automatically generated by Cormas !!  "	natDead := anObject</body><body package="VirusNoysters" selector="nbBatches">nbBatches	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^nbBatches ifNil:[nbBatches := 0]</body><body package="VirusNoysters" selector="nbBatches:">nbBatches: anObject	"Setter accessor of attribute nbBatches. 	!! This method was automatically generated by Cormas !!  "	nbBatches := anObject</body><body package="VirusNoysters" selector="nbDiplo">nbDiplo	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^nbDiplo ifNil:[nbDiplo := 0]</body><body package="VirusNoysters" selector="nbDiplo:">nbDiplo: anObject	"Setter accessor of attribute nbDiplo. 	!! This method was automatically generated by Cormas !!  "	nbDiplo := anObject</body><body package="VirusNoysters" selector="nbNat">nbNat	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^nbNat ifNil:[nbNat := 0]</body><body package="VirusNoysters" selector="nbNat:">nbNat: anObject	"Setter accessor of attribute nbNatTable. 	!! This method was automatically generated by Cormas !!  "	nbNat := anObject</body><body package="VirusNoysters" selector="nbOysters">nbOysters	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^nbOysters ifNil:[nbOysters := 0]</body><body package="VirusNoysters" selector="nbOysters:">nbOysters: anObject	"Setter accessor of attribute nbOysters. 	!! This method was automatically generated by Cormas !!  "	nbOysters := anObject</body><body package="VirusNoysters" selector="nbTriplo">nbTriplo	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^nbTriplo ifNil:[nbTriplo := 0]</body><body package="VirusNoysters" selector="nbTriplo:">nbTriplo: anObject	"Setter accessor of attribute nbTriplo. 	!! This method was automatically generated by Cormas !!  "	nbTriplo := anObject</body><body package="VirusNoysters" selector="owner">owner	"Getter accessor without default value "	^owner</body><body package="VirusNoysters" selector="owner:">owner: anObject	"Setter accessor of attribute owner. 	!! This method was automatically generated by Cormas !!  "	owner := anObject</body><body package="VirusNoysters" selector="profilTable">profilTable	"Getter accessor without default value "	^profilTable</body><body package="VirusNoysters" selector="profilTable:">profilTable: anObject	"Setter accessor of attribute profilTable. 	!! This method was automatically generated by Cormas !!  "	profilTable := anObject</body><body package="VirusNoysters" selector="ratioDiploDead">ratioDiploDead	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^ratioDiploDead ifNil:[ratioDiploDead := 0]</body><body package="VirusNoysters" selector="ratioDiploDead:">ratioDiploDead: anObject	"Setter accessor of attribute diploDeadTable. 	!! This method was automatically generated by Cormas !!  "	ratioDiploDead := anObject</body><body package="VirusNoysters" selector="ratioNatDead">ratioNatDead	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^ratioNatDead ifNil:[ratioNatDead := 0]</body><body package="VirusNoysters" selector="ratioNatDead:">ratioNatDead: anObject	"Setter accessor of attribute natDeadTable. 	!! This method was automatically generated by Cormas !!  "	ratioNatDead := anObject</body><body package="VirusNoysters" selector="ratioTriploDead">ratioTriploDead	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^ratioTriploDead ifNil:[ratioTriploDead := 0]</body><body package="VirusNoysters" selector="ratioTriploDead:">ratioTriploDead: anObject	"Setter accessor of attribute triploDeadTable. 	!! This method was automatically generated by Cormas !!  "	ratioTriploDead := anObject</body><body package="VirusNoysters" selector="triploDead">triploDead	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^triploDead ifNil:[triploDead := 0]</body><body package="VirusNoysters" selector="triploDead:">triploDead: anObject	"Setter accessor of attribute triploDeadTable. 	!! This method was automatically generated by Cormas !!  "	triploDead := anObject</body><body package="VirusNoysters" selector="zeOysters">zeOysters	"Getter accessor without default value "	^zeOysters</body><body package="VirusNoysters" selector="zeOysters:">zeOysters: anObject	"Setter accessor of attribute zeOysters. 	!! This method was automatically generated by Cormas !!  "	zeOysters := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>init</category><body package="VirusNoysters" selector="initTable">initTable	"On remplit les tables en suivant le mix choisi par l'ostreiculteur des le depart"		self profilTable: OrderedCollection new.	self zeOysters: OrderedCollection new.	self equipTable.	self updateFull.	self aBigBagOfReadyOysters: OrderedCollection new.	self updateInfo</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>booleans</category><body package="VirusNoysters" selector="updateFull">updateFull		self nbBatches &gt; self class carryingCapacity ifTrue: [self halt].	self isFull: self nbBatches = self class carryingCapacity</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>information</category><body package="VirusNoysters" selector="updateBatches">updateBatches	self nbBatches: self zeOysters size.</body><body package="VirusNoysters" selector="updateInfo">updateInfo	self updateOysterCountAndDeaths.	self collectReadyOysters.</body><body package="VirusNoysters" selector="updateOysterCountAndDeaths">updateOysterCountAndDeaths		| nat tri dip |	self nbDiplo: 0.	self nbTriplo: 0.	self nbNat: 0.	self diploDead: 0.	self triploDead: 0.	self natDead: 0.	nat := 0.	tri := 0.	dip := 0.	self zeOysters		do:			[:o | 			o class = Diploid				ifTrue:					[dip := dip + 1.					self nbDiplo: self nbDiplo + o size.					o killedByVirus						ifTrue: [self diploDead: self diploDead + o size]].			o class = Triploid				ifTrue:					[tri := tri + 1.					self nbTriplo: self nbTriplo + o size.					o killedByVirus						ifTrue: [self triploDead: self triploDead + o size]].			o class = Natural				ifTrue:					[nat := nat + 1.					self nbNat: self nbNat + o size.					o killedByVirus						ifTrue: [self natDead: self natDead + o size]]].	self		nbOysters: self nbDiplo + self nbTriplo + self nbNat.	"nat = 0		ifTrue: [self ratioNatDead: nil]		ifFalse: [self ratioNatDead: (100 * self natDead / self nbNat)].	tri = 0		ifTrue: [self ratioTriploDead: nil]		ifFalse:			[self ratioTriploDead: (100 * self triploDead / self nbTriplo)].	dip = 0		ifTrue: [self ratioDiploDead: nil]		ifFalse:			[self ratioDiploDead: (100 * self diploDead / self nbDiplo)]."</body><body package="VirusNoysters" selector="updateProfil">updateProfil	self profilTable removeAll.	self profilTable add: self nbTriplo.	self profilTable add: self nbDiplo.	self profilTable add: self nbNat.	self profilTable add: self triploDead.	self profilTable	add: self diploDead.	self profilTable add: self natDead.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>equipment</category><body package="VirusNoysters" selector="equip:">equip: o	"o is a batch of oysters that has to be placed on the table"	self isFull ifTrue:[self halt.].	self zeOysters add: o.	self updateBatches.	o patch: self patch.	o moveTo: self patch.	self updateFull</body><body package="VirusNoysters" selector="equipTable">equipTable		| anOysterClass newOyster |	self class carryingCapacity		timesRepeat:			[anOysterClass := self chooseType.			newOyster := self newEntity: anOysterClass.			newOyster initOyster.			newOyster table: self.			newOyster patch: self patch.			newOyster moveTo: self patch.	"Au moment d'autres achats, l'age est deja fixe, ici on le fixe aleatoirement"			newOyster				weight:					(Cormas						randomIntegerFrom: 3						to: newOyster class weightSellable).			self zeOysters add: newOyster]</body><body package="VirusNoysters" selector="equipTableOysters:">equipTableOysters: anOysterClass		| nbBatches |	nbBatches := self class carryingCapacity - self zeOysters size.	self equipTableWith: nbBatches ofOysters: anOysterClass</body><body package="VirusNoysters" selector="equipTableWith:ofOysters:">equipTableWith: numberOfBatches ofOysters: anOysterClass		| newOyster |	numberOfBatches		timesRepeat:			[newOyster := self newEntity: anOysterClass.			newOyster initOyster.			newOyster table: self.			newOyster moveTo: self patch.	"Au moment d'autres achats, l'age est deja fixe, ici on le fixe aleatoirement"			newOyster				weight:					(Cormas						randomIntegerFrom: 3						to: newOyster class weightSellable).			self zeOysters add: newOyster]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>oysters</category><body package="VirusNoysters" selector="chooseType">chooseType	"Renvoie un type d'huitre (une classe) avec les probabilites determinees par le mix choisi par l'ostreiculteur"		| myMix rand |	myMix := self owner myDecision chosenMix.	rand := Cormas random.	rand &lt; (myMix at: #T) ifTrue: [^Triploid].	rand &lt; ((myMix at: #T) + (myMix at: #D)) ifTrue: [^Diploid].	^Natural</body><body package="VirusNoysters" selector="collectReadyOysters">collectReadyOysters		| notReady |	notReady := OrderedCollection new.	self zeOysters		do:			[:o | 			o isSellable				ifTrue: [self aBigBagOfReadyOysters add: o]				ifFalse: [notReady add: o]].	self zeOysters removeAll.	self zeOysters addAll: notReady</body><body package="VirusNoysters" selector="removeReady">removeReady	self zeOysters removeAllSuchThat: [:o | o isDead or: [o isSellable]].</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>deprecated</category><body package="VirusNoysters" selector="stepTable">stepTable		self updateFull.	self updateInfo.</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table</class-id> <category>probes</category><body package="VirusNoysters" selector="pNbBatches">pNbBatches	^self nbBatches</body><body package="VirusNoysters" selector="pNbDiplo">pNbDiplo	^self nbDiplo</body><body package="VirusNoysters" selector="pNbDiploDead">pNbDiploDead	^self diploDead</body><body package="VirusNoysters" selector="pNbNatural">pNbNatural	^self nbNat</body><body package="VirusNoysters" selector="pNbNaturalDead">pNbNaturalDead	^self natDead</body><body package="VirusNoysters" selector="pNbOysters">pNbOysters	^self nbOysters</body><body package="VirusNoysters" selector="pNbTriplo">pNbTriplo	^self nbTriplo</body><body package="VirusNoysters" selector="pNbTriploDead">pNbTriploDead	^self triploDead</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table class</class-id> <category>- default value</category><body package="VirusNoysters" selector="availableNutrients_default">availableNutrients_default 	"Return the default value of attribute #availableNutrients : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="carryingCapacity_default">carryingCapacity_default 	"Return the default value of attribute #carryingCapacity : 20.		!! This method was automatically generated by Cormas !!"	^20</body><body package="VirusNoysters" selector="diploDeadTable_default">diploDeadTable_default 	"Return the default value of attribute #diploDeadTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="diploDead_default">diploDead_default 	"Return the default value of attribute #diploDead : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="farm_default">farm_default 	"Return the default value of attribute #farm : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="isFull_default">isFull_default 	"Return the default value of attribute #isFull : false.		!! This method was automatically generated by Cormas !!"	^false</body><body package="VirusNoysters" selector="natDeadTable_default">natDeadTable_default 	"Return the default value of attribute #natDeadTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="natDead_default">natDead_default 	"Return the default value of attribute #natDead : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbBatches_default">nbBatches_default 	"Return the default value of attribute #nbBatches : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbDiploTable_default">nbDiploTable_default 	"Return the default value of attribute #nbDiploTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbDiplo_default">nbDiplo_default 	"Return the default value of attribute #nbDiplo : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbNatTable_default">nbNatTable_default 	"Return the default value of attribute #nbNatTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbNat_default">nbNat_default 	"Return the default value of attribute #nbNat : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbOystersTable_default">nbOystersTable_default 	"Return the default value of attribute #nbOystersTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbOysters_default">nbOysters_default 	"Return the default value of attribute #nbOysters : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbTriploTable_default">nbTriploTable_default 	"Return the default value of attribute #nbTriploTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="nbTriplo_default">nbTriplo_default 	"Return the default value of attribute #nbTriplo : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="owner_default">owner_default 	"Return the default value of attribute #owner : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="profilTable_default">profilTable_default 	"Return the default value of attribute #profilTable : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="ratioDiploDeadTable_default">ratioDiploDeadTable_default 	"Return the default value of attribute #ratioDiploDeadTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="ratioDiploDead_default">ratioDiploDead_default 	"Return the default value of attribute #ratioDiploDead : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="ratioNatDeadTable_default">ratioNatDeadTable_default 	"Return the default value of attribute #ratioNatDeadTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="ratioNatDead_default">ratioNatDead_default 	"Return the default value of attribute #ratioNatDead : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="ratioTriploDeadTable_default">ratioTriploDeadTable_default 	"Return the default value of attribute #ratioTriploDeadTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="ratioTriploDead_default">ratioTriploDead_default 	"Return the default value of attribute #ratioTriploDead : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="readyOysters_default">readyOysters_default 	"Return the default value of attribute #readyOysters : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="triploDeadTable_default">triploDeadTable_default 	"Return the default value of attribute #triploDeadTable : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="triploDead_default">triploDead_default 	"Return the default value of attribute #triploDead : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="zeOysters_default">zeOysters_default 	"Return the default value of attribute #zeOysters : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Table class</class-id> <category>accessing</category><body package="VirusNoysters" selector="carryingCapacity">carryingCapacity	"Getter accessor with default value = 20.	!! This method was automatically generated by Cormas !!"	^carryingCapacity ifNil:[carryingCapacity := 20]</body><body package="VirusNoysters" selector="carryingCapacity:">carryingCapacity: anObject	"Setter accessor of attribute carryingCapacity. 	!! This method was automatically generated by Cormas !!  "	carryingCapacity := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Triploid</class-id> <category>accessing</category><body package="VirusNoysters" selector="isSellable">isSellable	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^isSellable ifNil:[isSellable := false]</body><body package="VirusNoysters" selector="killedByVirus">killedByVirus	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^killedByVirus ifNil:[killedByVirus := false]</body><body package="VirusNoysters" selector="weight">weight	"Getter accessor with default value = 3.	!! This method was automatically generated by Cormas !!"	^weight ifNil:[weight := 3]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Triploid class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Triploid class</class-id> <category>accessing</category><body package="VirusNoysters" selector="chromosome">chromosome	"Getter accessor with default value = 3.	!! This method was automatically generated by Cormas !!"	^chromosome ifNil:[chromosome := 3]</body><body package="VirusNoysters" selector="maxGrowth">maxGrowth	"Getter accessor with default value = 3.	!! This method was automatically generated by Cormas !!"	^maxGrowth ifNil:[maxGrowth := 3]</body><body package="VirusNoysters" selector="sizeMaxOysterBatch">sizeMaxOysterBatch	"Getter accessor with default value = 10000.	!! This method was automatically generated by Cormas !!"	^sizeMax ifNil:[sizeMax := 10000]</body><body package="VirusNoysters" selector="type">type	"Getter accessor with default value = 'triplo'.	!! This method was automatically generated by Cormas !!"	^type ifNil:[type := 'triplo']</body><body package="VirusNoysters" selector="weightSellable">weightSellable	"Getter accessor with default value = 18.	!! This method was automatically generated by Cormas !!"	^weightSellable ifNil:[weightSellable := 18]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Triploid class</class-id> <category>- default value</category><body package="VirusNoysters" selector="ageSellable_default">ageSellable_default 	"Return the default value of attribute #ageSellable : 18.		!! This method was automatically generated by Cormas !!"	^18</body><body package="VirusNoysters" selector="age_default">age_default 	"Return the default value of attribute #age : 3.		!! This method was automatically generated by Cormas !!"	^3</body><body package="VirusNoysters" selector="chromosome_default">chromosome_default 	"Return the default value of attribute #chromosome : 3.		!! This method was automatically generated by Cormas !!"	^3</body><body package="VirusNoysters" selector="sizeMax_default">sizeMax_default 	"Return the default value of attribute #sizeMax : 10000.		!! This method was automatically generated by Cormas !!"	^10000</body><body package="VirusNoysters" selector="type_default">type_default 	"Return the default value of attribute #type : 'triplo'.		!! This method was automatically generated by Cormas !!"	^'triplo'</body><body package="VirusNoysters" selector="weightSellable_default">weightSellable_default 	"Return the default value of attribute #weightSellable : 18.		!! This method was automatically generated by Cormas !!"	^18</body><body package="VirusNoysters" selector="weight_default">weight_default 	"Return the default value of attribute #weight : 3.		!! This method was automatically generated by Cormas !!"	^3</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>control</category><body package="VirusNoysters" selector="stepDecision:">stepDecision: t		t \\ 4 = 2		ifTrue:			[self updateQuantities.			self updateMix]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>initialize-release</category><body package="VirusNoysters" selector="initDecision">initDecision		| incomes |	self decisionMaker type = 'conscious'		ifTrue: [self chosenMix: self decisionMaker zeMix mN]		ifFalse:			[self				chosenMix:					(self decisionMaker zeMix setMixes at: (Cormas randomIntegerFrom: 1 to: 7)).	"On choisit un mix au hasard"			incomes := self incomeCalcInit.	"On calcule les revenus lies a chaque type d'huitre"			self				expectedOutcome:					(self						newProfitMix: self chosenMix						expectedIncome: incomes)	"On calcule le revenu lie au mix choisi"].	self updateShares</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>accessing</category><body package="VirusNoysters" selector="changeMix">changeMix	"Getter accessor with default value = false.	!! This method was automatically generated by Cormas !!"	^changeMix ifNil:[changeMix := false]</body><body package="VirusNoysters" selector="changeMix:">changeMix: anObject	"Setter accessor of attribute changeMix. 	!! This method was automatically generated by Cormas !!  "	changeMix := anObject</body><body package="VirusNoysters" selector="chosenMix">chosenMix	"Getter accessor without default value "	^chosenMix</body><body package="VirusNoysters" selector="chosenMix:">chosenMix: anObject	"Setter accessor of attribute chosenMix. 	!! This method was automatically generated by Cormas !!  "	chosenMix := anObject</body><body package="VirusNoysters" selector="decisionMaker">decisionMaker	"Getter accessor without default value "	^decisionMaker</body><body package="VirusNoysters" selector="decisionMaker:">decisionMaker: anObject	"Setter accessor of attribute decisionMaker. 	!! This method was automatically generated by Cormas !!  "	decisionMaker := anObject</body><body package="VirusNoysters" selector="expectedOutcome">expectedOutcome	"Getter accessor with default value = 0. 	!! This method was automatically generated by Cormas !! "	^expectedOutcome ifNil:[expectedOutcome := 0]</body><body package="VirusNoysters" selector="expectedOutcome:">expectedOutcome: anObject	"Setter accessor of attribute expectedOutcome. 	!! This method was automatically generated by Cormas !!  "	expectedOutcome := anObject</body><body package="VirusNoysters" selector="idealQtyDiplo">idealQtyDiplo	"Getter accessor with default value = 5000.	!! This method was automatically generated by Cormas !!"	^idealQtyDiplo ifNil:[idealQtyDiplo := 5000]</body><body package="VirusNoysters" selector="idealQtyDiplo:">idealQtyDiplo: anObject	"Setter accessor of attribute idealDiplo. 	!! This method was automatically generated by Cormas !!  "	idealQtyDiplo := anObject</body><body package="VirusNoysters" selector="idealQtyNat">idealQtyNat	"Getter accessor with default value = 5000.	!! This method was automatically generated by Cormas !!"	^idealQtyNat ifNil:[idealQtyNat := 5000]</body><body package="VirusNoysters" selector="idealQtyNat:">idealQtyNat: anObject	"Setter accessor of attribute idealNat. 	!! This method was automatically generated by Cormas !!  "	idealQtyNat := anObject</body><body package="VirusNoysters" selector="idealQtyTriplo">idealQtyTriplo	"Getter accessor with default value = 5000.	!! This method was automatically generated by Cormas !!"	^idealQtyTriplo ifNil:[idealQtyTriplo := 5000]</body><body package="VirusNoysters" selector="idealQtyTriplo:">idealQtyTriplo: anObject	"Setter accessor of attribute idealTriplo. 	!! This method was automatically generated by Cormas !!  "	idealQtyTriplo := anObject</body><body package="VirusNoysters" selector="max">max	"Getter accessor with default value = 70.	!! This method was automatically generated by Cormas !!"	^max ifNil:[max := 70]</body><body package="VirusNoysters" selector="max:">max: anObject	"Setter accessor of attribute max. 	!! This method was automatically generated by Cormas !!  "	max := anObject</body><body package="VirusNoysters" selector="min">min	"Getter accessor with default value = 40.	!! This method was automatically generated by Cormas !!"	^min ifNil:[min := 40]</body><body package="VirusNoysters" selector="min:">min: anObject	"Setter accessor of attribute min. 	!! This method was automatically generated by Cormas !!  "	min := anObject</body><body package="VirusNoysters" selector="shareDiplo">shareDiplo	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^shareDiplo ifNil:[shareDiplo := 0]</body><body package="VirusNoysters" selector="shareDiplo:">shareDiplo: anObject	"Setter accessor of attribute shareDiplo. 	!! This method was automatically generated by Cormas !!  "	shareDiplo := anObject</body><body package="VirusNoysters" selector="shareNat">shareNat	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^shareNat ifNil:[shareNat := 0]</body><body package="VirusNoysters" selector="shareNat:">shareNat: anObject	"Setter accessor of attribute shareNat. 	!! This method was automatically generated by Cormas !!  "	shareNat := anObject</body><body package="VirusNoysters" selector="shareTriplo">shareTriplo	"Getter accessor with default value = 0.	!! This method was automatically generated by Cormas !!"	^shareTriplo ifNil:[shareTriplo := 0]</body><body package="VirusNoysters" selector="shareTriplo:">shareTriplo: anObject	"Setter accessor of attribute shareTriplo. 	!! This method was automatically generated by Cormas !!  "	shareTriplo := anObject</body><body package="VirusNoysters" selector="sizeMaxOysterBatch">sizeMaxOysterBatch	"Getter accessor without default value "	^sizeMaxOysterBatch</body><body package="VirusNoysters" selector="sizeMaxOysterBatch:">sizeMaxOysterBatch: anObject	"Setter accessor of attribute sizeMax. 	!! This method was automatically generated by Cormas !!  "	sizeMaxOysterBatch := anObject</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>calculations</category><body package="VirusNoysters" selector="costFillTable:with:qty:">costFillTable: aTable with: anOysterClass qty: aNumber		| emptySpots halles pricePerSpot price costToFillTable |	emptySpots := aTable class carryingCapacity - aTable zeOysters size.	halles := self decisionMaker zeMarket.	anOysterClass = Triploid		ifTrue: [price := halles class priceTriplo]		ifFalse: [price := halles class priceDiplo].	pricePerSpot := price * aNumber.	costToFillTable := pricePerSpot * emptySpots.	^costToFillTable</body><body package="VirusNoysters" selector="incomeCalc">incomeCalc	"Calcule les revenus lies aux differentes categories d'huitres pour les reutiliser dans l'evaluation des mix."		| incomeT incomeD incomeN incomes market obs |	market := self decisionMaker zeMarket.	obs := self decisionMaker myObservation.	incomeT := self		profitTriploQty: self idealQtyTriplo		buyingPrice: market class priceTriplo		sellingPrice: market class priceGrown		mortality:			(obs				beliefMortalityOysterType: Triploid				Qty: self idealQtyTriplo) / 100.	incomeD := self		profitDiploQty: self idealQtyDiplo		buyingPrice: market class priceDiplo		sellingPrice: market class priceGrown		mortality:			(obs				beliefMortalityOysterType: Diploid				Qty: self idealQtyDiplo) / 100.	incomeN := self		profitNatQty: self idealQtyNat		buyingPrice: market class priceNatural		sellingPrice: market class priceGrown		mortality:			(obs				beliefMortalityOysterType: Natural				Qty: self idealQtyNat) / 100.	incomes := OrderedCollection new.	incomes add: incomeT.	incomes add: incomeD.	incomes add: incomeN.	^incomes</body><body package="VirusNoysters" selector="incomeCalc:market:observation:">incomeCalc: qty market: market observation: obs		"Calcule les revenus lies aux differentes categories d'huitres pour les reutiliser dans l'evaluation des mix."	| incomeT incomeD incomeN incomes |	incomeT := self		profitTriploQty: (qty at: 1)		buyingPrice: market class priceTriplo		sellingPrice: market class priceGrown		mortality:			(obs				beliefMortalityOysterType: Triploid				Qty: (qty at: 1)) / 100.	incomeD := self		profitDiploQty: (qty at: 2)		buyingPrice: market class priceDiplo		sellingPrice: market class priceGrown		mortality:			(obs				beliefMortalityOysterType: Diploid				Qty: (qty at: 2)) / 100.	incomeN := self		profitNatQty: (qty at: 3)		buyingPrice: market class priceNatural		sellingPrice: market class priceGrown		mortality:			(obs				beliefMortalityOysterType: Natural				Qty: (qty at: 3)) / 100.	incomes := OrderedCollection new.	incomes add: incomeT.	incomes add: incomeD.	incomes add: incomeN.	^incomes</body><body package="VirusNoysters" selector="incomeCalcInit">incomeCalcInit	"Calcule les revenus lies aux differentes categories d'huitres pour les reutiliser dans l'evaluation des mix."	| incomeT incomeD incomeN incomes market |	market := self decisionMaker zeMarket.	incomeT := self		profitTriploQty: self idealQtyTriplo		buyingPrice: market class priceTriplo		sellingPrice: market class priceGrown		mortality: 0.	incomeD := self		profitDiploQty: self idealQtyDiplo		buyingPrice: market class priceDiplo		sellingPrice: market class priceGrown		mortality: 0.	incomeN := self		profitNatQty: self idealQtyNat		buyingPrice: market class priceNatural		sellingPrice: market class priceGrown		mortality: 0.	incomes := OrderedCollection new.	incomes add: incomeT.	incomes add: incomeD.	incomes add: incomeN.	^incomes</body><body package="VirusNoysters" selector="incomeCalcInit:market:">incomeCalcInit: qty market: market	"Calcule les revenus lies aux differentes categories d'huitres pour les reutiliser dans l'evaluation des mix."	| incomeT incomeD incomeN incomes |	incomeT := self		profitTriploQty: (qty at: 1)		buyingPrice: market class priceTriplo		sellingPrice: market class priceGrown		mortality: 0.	incomeD := self		profitDiploQty: (qty at: 2)		buyingPrice: market class priceDiplo		sellingPrice: market class priceGrown		mortality: 0.	incomeN := self		profitNatQty: (qty at: 3)		buyingPrice: market class priceNatural		sellingPrice: market class priceGrown		mortality: 0.	incomes := OrderedCollection new.	incomes add: incomeT.	incomes add: incomeD.	incomes add: incomeN.	^incomes</body><body package="VirusNoysters" selector="incomeCalcInitMarket:">incomeCalcInitMarket: market	"Calcule les revenus lies aux differentes categories d'huitres pour les reutiliser dans l'evaluation des mix."	| incomeT incomeD incomeN incomes |	incomeT := self		profitTriploQty: self idealQtyTriplo		buyingPrice: market class priceTriplo		sellingPrice: market class priceGrown		mortality: 0.	incomeD := self		profitDiploQty: self idealQtyDiplo		buyingPrice: market class priceDiplo		sellingPrice: market class priceGrown		mortality: 0.	incomeN := self		profitNatQty: self idealQtyNat		buyingPrice: market class priceNatural		sellingPrice: market class priceGrown		mortality: 0.	incomes := OrderedCollection new.	incomes add: incomeT.	incomes add: incomeD.	incomes add: incomeN.	^incomes</body><body package="VirusNoysters" selector="newProfitMix:expectedIncome:">newProfitMix: mix expectedIncome: incomes	"mix est un dictionnaire qui contient les proportions de chaque type d'huitre ex mix = (#T 0.5 #D 0.5 #N 0).	 incomes est une orderedCollection qui contient les profits calcules pour les quantites ideales pour le fermier pour chaque type d'huitre, dans l'ordre incomes = (iT, iD, iN)."		| p |	p := (mix at: #T) * (incomes at: 1) + ((mix at: #D) * (incomes at: 2))		+ ((mix at: #N) * (incomes at: 3)).	"On calcule la moyenne avec le mix choisi"	^p</body><body package="VirusNoysters" selector="newProfitMix:Qty:">newProfitMix: mix Qty: qty	"mix est un dictionnaire qui contient les proportions de chaque type d'huitre ex mix = (#T 0.5 #D 0.5 #N 0).	 qty est une orderedCollection qui contient les quantites ideales pour le fermier pour chaque type d'huitre, dans l'ordre qty = (qT, qD, qN)."		| p market obs incomeT incomeD incomeN |	market := self decisionMaker zeMarket.	"Il doit connaitre les prix du marche"	obs := self decisionMaker myObservation.	"Et ses croyances"	(mix at: #T) = 0		ifTrue: [incomeT := 0]		ifFalse:			[incomeT := self				profitTriploQty: (qty at: 1)				buyingPrice: market class priceTriplo				sellingPrice: market class priceGrown				mortality:					((obs						beliefMortalityOysterType: Triploid						Qty: (qty at: 1)) / 100)].	"On calcule le profit pour chaque type d'huitres connaissant ses croyances de mortalite ainsi que sa quantite ideale."	(mix at: #D) = 0		ifTrue: [incomeD := 0]		ifFalse:			[incomeD := self				profitDiploQty: (qty at: 2)				buyingPrice: market class priceDiplo				sellingPrice: market class priceGrown				mortality:					((obs						beliefMortalityOysterType: Diploid						Qty: (qty at: 2)) / 100)].	(mix at: #N) = 0		ifTrue: [incomeN := 0]		ifFalse:			[incomeN := self				profitNatQty: (qty at: 3)				buyingPrice: market class priceNatural				sellingPrice: market class priceGrown				mortality:					((obs						beliefMortalityOysterType: Natural						Qty: (qty at: 3)) / 100)].	p := (mix at: #T) * incomeT + ((mix at: #D) * incomeD)		+ ((mix at: #N) * incomeN).	self halt.	"On calcule la moyenne avec le mix choisi"	^p</body><body package="VirusNoysters" selector="profitDiploQty:buyingPrice:sellingPrice:mortality:">profitDiploQty: q buyingPrice: b sellingPrice: s mortality: m	"Une huitre diploide est exposee trois fois. On ne tient pas compte de l'age de l'huitre.	Le profit correspond donc a: profit = [s(1-m)^3-b]*Q"	| probaSurvie profitHuitre |	probaSurvie := 1 - m.	probaSurvie := probaSurvie raisedTo: 3.	profitHuitre := s * probaSurvie - b.	^profitHuitre * q</body><body package="VirusNoysters" selector="profitNatQty:buyingPrice:sellingPrice:mortality:">profitNatQty: q buyingPrice: b sellingPrice: s mortality: m	"On prend la meme formule que pour les diplos. On considere que les economies en ecloserie du captage sont compensees par les couts du travail du captage"	| probaSurvie profitHuitre |	probaSurvie := 1 - m.	probaSurvie := probaSurvie raisedTo: 3.	profitHuitre := s * probaSurvie - b.	^profitHuitre * q</body><body package="VirusNoysters" selector="profitTriploQty:buyingPrice:sellingPrice:mortality:">profitTriploQty: q buyingPrice: b sellingPrice: s mortality: m	"Les triplos sont elevees plus rapidement, donc elles sont moins exposees au virus. On considere qu'elles sont exposees 1.5 fois"	| probaSurvie profitHuitre |	probaSurvie := 1 - m.	probaSurvie := probaSurvie raisedTo: 1.5.	profitHuitre := s * probaSurvie - b.	^profitHuitre * q</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>quantities</category><body package="VirusNoysters" selector="updateIdealQtyOysterType:Qty:">updateIdealQtyOysterType: anOysterClass Qty: qty	"Va voir si la quantite est dans les bornes autorisees de mortalite et renvoie une valeur actualisee "		| obs belief |	obs := self decisionMaker myObservation.	belief := obs beliefMortalityOysterType: anOysterClass Qty: qty.	(belief &lt; self min and: [qty &lt; self sizeMaxOysterBatch])		ifTrue: [^qty + self class qtyChange].	belief &gt; self max		ifTrue:			[qty - self class qtyChange &gt; 0				ifTrue: [^qty - self class qtyChange]				ifFalse: [^0]].	^qty</body><body package="VirusNoysters" selector="updateQuantities">updateQuantities	"Since the conscious only chooses natural oysters, we do not update other values."		self decisionMaker type = 'conscious'		ifTrue: [self idealQtyNat: (self updateIdealQtyOysterType: Natural Qty: self idealQtyNat)]		ifFalse:			[self idealQtyNat: (self updateIdealQtyOysterType: Natural Qty: self idealQtyNat).			self idealQtyTriplo: (self updateIdealQtyOysterType: Triploid Qty: self idealQtyTriplo).			self idealQtyDiplo: (self updateIdealQtyOysterType: Diploid Qty: self idealQtyDiplo)]</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>mix</category><body package="VirusNoysters" selector="compareMixes:and:">compareMixes: m1 and: m2	"compares the two mixes and send if they are equal. m = dictionary(#T #D #N)"	(m1 at: #T) = (m2 at:#T) ifFalse:[^false].	(m1 at: #D) = (m2 at:#D) ifFalse:[^false].	^true.</body><body package="VirusNoysters" selector="mixConscious">mixConscious	</body><body package="VirusNoysters" selector="mixConservative">mixConservative	"Il ne change d'option que si son mix devient non satisfaisant. Satisfaisant si positif avec des taux actualises de mortalite. S'il ne trouve pas de mix a son pied, il prend le meilleur de tous."		| newExpectedOutcome incomes mixes newMix i expected newBestMix |	incomes := self incomeCalc.	newExpectedOutcome := self		newProfitMix: self chosenMix		expectedIncome: incomes.	newExpectedOutcome &lt; self class satisfied		ifTrue:			[mixes := Cormas mixt: self decisionMaker zeMix setMixes.			i := 1.			[newExpectedOutcome &lt; self class satisfied and: [i &lt; mixes size]]				whileTrue:					[newMix := mixes at: i.					newBestMix := newMix.					expected := self newProfitMix: newMix expectedIncome: incomes.					expected &gt; newExpectedOutcome						ifTrue:							[newBestMix := newMix.							newExpectedOutcome := expected].					i := i + 1].			self chosenMix: newBestMix].	self chosenMix isNil ifTrue:[self halt]</body><body package="VirusNoysters" selector="mixEconomicus">mixEconomicus	"L'economicus s'adapte a son environnement en parcourant l'ensemble des mix et en choisissant l'optimal. Cette decision prend en compte les croyances de taux de mortalite"		| possibleMixes newMix mix expected currentMix incomes |	possibleMixes := self decisionMaker zeMix setMixes.	self changeMix ifTrue: [self changeMix: false].	currentMix := self chosenMix.	incomes := self incomeCalc.	newMix := possibleMixes at: 1.	self expectedOutcome: (self newProfitMix: newMix expectedIncome: incomes).	2		to: possibleMixes size		do:			[:i | 			mix := possibleMixes at: i.			expected := self newProfitMix: mix expectedIncome: incomes.			expected &gt; self expectedOutcome				ifTrue:					[newMix := mix.					self expectedOutcome: expected]].	(self compareMixes: newMix and: currentMix)		ifFalse: [self changeMix: true].	self chosenMix: newMix.	self updateShares</body><body package="VirusNoysters" selector="updateMix">updateMix	self decisionMaker type = 'economicus' ifTrue: [self mixEconomicus].	self decisionMaker type = 'conservative' ifTrue: [self mixConservative].	self decisionMaker type = 'conscious' ifTrue: [self mixConscious]</body><body package="VirusNoysters" selector="updateShares">updateShares		self shareTriplo: (self chosenMix at: #T).	self shareDiplo: (self chosenMix at: #D).	self shareNat: (self chosenMix at: #N)</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>probes</category><body package="VirusNoysters" selector="pExpectedOutcome">pExpectedOutcome	^self expectedOutcome</body><body package="VirusNoysters" selector="pIdeadQtyDiplo">pIdeadQtyDiplo	^self idealQtyDiplo</body><body package="VirusNoysters" selector="pIdeadQtyNat">pIdeadQtyNat	^self idealQtyNat</body><body package="VirusNoysters" selector="pIdeadQtyTriplo">pIdeadQtyTriplo	^self idealQtyTriplo</body><body package="VirusNoysters" selector="pShareDiplo">pShareDiplo	^self shareDiplo</body><body package="VirusNoysters" selector="pShareNat">pShareNat	^self shareNat</body><body package="VirusNoysters" selector="pShareTriplo">pShareTriplo	^self shareTriplo</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision</class-id> <category>deprecated</category><body package="VirusNoysters" selector="mixEconomicus:">mixEconomicus: t	"Toutes ces decisions doivent etre modulees : pour le moment, si une table n'est pas pleine et qu'il a de l'argent alors il remplit la table de triploides"		| myFarmer zeFarm amountNeeded |	myFarmer := self decisionMaker.	zeFarm := myFarmer myFarm.	zeFarm tables		do:			[:tab | 			tab isFull				ifFalse:					[amountNeeded := self						costFillTable: tab						with: Triploid						qty: myFarmer brain idealQuantityPerBatch.					amountNeeded &lt; myFarmer wallet						ifTrue:							[tab equipTableOysters: Triploid.							myFarmer wallet: myFarmer wallet - amountNeeded]]]</body><body package="VirusNoysters" selector="mixEconomicusOld">mixEconomicusOld	"L'economicus s'adapte a son environnement en parcourant l'ensemble des mix et en choisissant l'optimal. Cette decision prend en compte les croyances de taux de mortalite"		| possibleMixes newMix mix expected currentMix incomes |	possibleMixes := self decisionMaker zeMix setMixes.	self changeMix ifTrue: [self changeMix: false].	currentMix := self chosenMix.	incomes := self incomeCalc.	newMix := possibleMixes at: 1.	self expectedOutcome: (self newProfitMix: newMix expectedIncome: incomes).	2		to: possibleMixes size		do:			[:i | 			mix := possibleMixes at: i.			expected := self newProfitMix: mix expectedIncome: incomes.			expected &gt; self expectedOutcome				ifTrue:					[newMix := mix.					self expectedOutcome: expected]].	(self compareMixes: newMix and: currentMix)		ifFalse: [self changeMix: true].	self chosenMix: newMix.	self updateShares</body><body package="VirusNoysters" selector="profitMix:Qty:">profitMix: mix Qty: qty	"mix est un dictionnaire qui contient les proportions de chaque type d'huitre ex mix = (#T 0.5 #D 0.5 #N 0).	 qty est une orderedCollection qui contient les quantites ideales pour le fermier pour chaque type d'huitre, dans l'ordre qty = (qT, qD, qN)."		| p market obs incomeT incomeD incomeN |	market := self decisionMaker zeMarket.	"Il doit connaitre les prix du marche"	obs := self decisionMaker myObservation.	"Et ses croyances"	(mix at: #T) = 0		ifTrue: [incomeT := 0]		ifFalse:			[incomeT := market class priceGrown				*					(1						-							((obs								beliefMortalityOysterType: Triploid								Qty: (qty at: 1) ) /100)) - market class priceTriplo].	"On calcule le profit pour chaque type d'huitres connaissant ses croyances de mortalite ainsi que sa quantite ideale."	(mix at: #D) = 0		ifTrue: [incomeD := 0]		ifFalse:			[incomeD := market class priceGrown				*					(1						-							((obs								beliefMortalityOysterType: Diploid								Qty: (qty at: 2) ) /100)) - market class priceDiplo].	(mix at: #N) = 0		ifTrue: [incomeN := 0]		ifFalse:			[incomeN := market class priceGrown				*					(1						-							((obs								beliefMortalityOysterType: Natural								Qty: (qty at: 3) ) /100)) - market class priceNatural].	p := (mix at: #T) * (qty at: 1) * incomeT		+ ((mix at: #D) * (qty at: 2) * incomeD)		+ ((mix at: #N) * (qty at: 3) * incomeN).	"On calcule la moyenne avec le mix choisi"	^p</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision class</class-id> <category>testing</category><body package="VirusNoysters" selector="isAbstract">isAbstract ^false</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision class</class-id> <category>- default value</category><body package="VirusNoysters" selector="changeMix_default">changeMix_default 	"Return the default value of attribute #changeMix : false.		!! This method was automatically generated by Cormas !!"	^false</body><body package="VirusNoysters" selector="chosenMix_default">chosenMix_default 	"Return the default value of attribute #chosenMix : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="decisionMaker_default">decisionMaker_default 	"Return the default value of attribute #decisionMaker : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="expectedOutcome_default">expectedOutcome_default 	"Return the default value of attribute #expectedOutcome : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="idealDiplo_default">idealDiplo_default 	"Return the default value of attribute #idealDiplo : 5000.		!! This method was automatically generated by Cormas !!"	^5000</body><body package="VirusNoysters" selector="idealNat_default">idealNat_default 	"Return the default value of attribute #idealNat : 5000.		!! This method was automatically generated by Cormas !!"	^5000</body><body package="VirusNoysters" selector="idealQtyDiplo_default">idealQtyDiplo_default 	"Return the default value of attribute #idealQtyDiplo : 5000.		!! This method was automatically generated by Cormas !!"	^5000</body><body package="VirusNoysters" selector="idealQtyNat_default">idealQtyNat_default 	"Return the default value of attribute #idealQtyNat : 5000.		!! This method was automatically generated by Cormas !!"	^5000</body><body package="VirusNoysters" selector="idealQtyTriplo_default">idealQtyTriplo_default 	"Return the default value of attribute #idealQtyTriplo : 5000.		!! This method was automatically generated by Cormas !!"	^5000</body><body package="VirusNoysters" selector="idealTriplo_default">idealTriplo_default 	"Return the default value of attribute #idealTriplo : 5000.		!! This method was automatically generated by Cormas !!"	^5000</body><body package="VirusNoysters" selector="max_default">max_default 	"Return the default value of attribute #max : 70.		!! This method was automatically generated by Cormas !!"	^70</body><body package="VirusNoysters" selector="min_default">min_default 	"Return the default value of attribute #min : 40.		!! This method was automatically generated by Cormas !!"	^40</body><body package="VirusNoysters" selector="qtyChange_default">qtyChange_default 	"Return the default value of attribute #qtyChange : 500.		!! This method was automatically generated by Cormas !!"	^500</body><body package="VirusNoysters" selector="satisfied_default">satisfied_default 	"Return the default value of attribute #satisfied : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="shareDiplo_default">shareDiplo_default 	"Return the default value of attribute #shareDiplo : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="shareNat_default">shareNat_default 	"Return the default value of attribute #shareNat : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="shareTriplo_default">shareTriplo_default 	"Return the default value of attribute #shareTriplo : 0.		!! This method was automatically generated by Cormas !!"	^0</body><body package="VirusNoysters" selector="sizeMaxOysterBatch_default">sizeMaxOysterBatch_default 	"Return the default value of attribute #sizeMaxOysterBatch : nil.		!! This method was automatically generated by Cormas !!"	^nil</body><body package="VirusNoysters" selector="sizeMax_default">sizeMax_default 	"Return the default value of attribute #sizeMax : nil.		!! This method was automatically generated by Cormas !!"	^nil</body></methods><methods><class-id>CormasNS.Models.VirusNoysters.Decision class</class-id> <category>accessing</category><body package="VirusNoysters" selector="qtyChange">qtyChange	"Getter accessor with default value = 500.	!! This method was automatically generated by Cormas !!"	^qtyChange ifNil:[qtyChange := 500]</body><body package="VirusNoysters" selector="qtyChange:">qtyChange: anObject	"Setter accessor of attribute qtyChange. 	!! This method was automatically generated by Cormas !!  "	qtyChange := anObject</body><body package="VirusNoysters" selector="satisfied">satisfied	"Getter accessor with default value = 0. 	!! This method was automatically generated by Cormas !! "	^satisfied ifNil:[satisfied := 0]</body><body package="VirusNoysters" selector="satisfied:">satisfied: anObject	"Setter accessor of attribute satisfied. 	!! This method was automatically generated by Cormas !!  "	satisfied := anObject</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>PassiveObject</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.Entity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>destroyed </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>ObjectLocation</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.PassiveObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>patch center </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>AgentLocation</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.Agent</super><private>false</private><indexed-type>none</indexed-type><inst-vars>patch </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>CormasModel</name><environment>CormasNS.Kernel</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>cormas timeStepValue channel activeInit activeControl spaceModel data simManager database collector defaultAttributesSetter sensitivitySetter delayedChanges allClassVarBOSS </inst-vars><class-inst-vars>timeStep cellClass spatialClasses socialClasses passiveClasses povColorsDict visualStateIsOpen charts activeProbes activityDiagrams currentSimulation randUi </class-inst-vars><imports></imports><category>CormasKernel-Interface</category><attributes><package>Cormas</package></attributes></class><class><name>SpatialEntityElement</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.SpatialEntity</super><private>false</private><indexed-type>none</indexed-type><inst-vars>orderedNeighbourhood default </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class><class><name>AgentCommLocation</name><environment>CormasNS.Kernel</environment><super>CormasNS.Kernel.AgentLocation</super><private>false</private><indexed-type>none</indexed-type><inst-vars>mailBox channel agentObs acquaintances </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>CormasKernel-Entities</category><attributes><package>Cormas</package></attributes></class></st-source>